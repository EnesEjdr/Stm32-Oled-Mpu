
Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003604  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e4  08003710  08003710  00013710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ef4  08003ef4  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08003ef4  08003ef4  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ef4  08003ef4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ef4  08003ef4  00013ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ef8  08003ef8  00013ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08003efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000678  20000064  08003f60  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006dc  08003f60  000206dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac18  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bbf  00000000  00000000  0002ace8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a00  00000000  00000000  0002c8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007bd  00000000  00000000  0002d2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000179e6  00000000  00000000  0002da65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d3bf  00000000  00000000  0004544b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000859b5  00000000  00000000  0005280a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002db0  00000000  00000000  000d81c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000daf70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	080036f8 	.word	0x080036f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	080036f8 	.word	0x080036f8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fde9 	bl	8000d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f88d 	bl	8000274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f94d 	bl	80003f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f8c5 	bl	80002ec <MX_I2C1_Init>
  MX_I2C2_Init();
 8000162:	f000 f8f1 	bl	8000348 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000166:	f000 f91d 	bl	80003a4 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 800016a:	f000 fbdf 	bl	800092c <ssd1306_Init>
  MPU6050_Init(&hi2c2);
 800016e:	483a      	ldr	r0, [pc, #232]	; (8000258 <main+0x10c>)
 8000170:	f000 f975 	bl	800045e <MPU6050_Init>
  MPU6050_Set_DLPF(&hi2c2, MPU6050_DLPF_6);
 8000174:	2106      	movs	r1, #6
 8000176:	4838      	ldr	r0, [pc, #224]	; (8000258 <main+0x10c>)
 8000178:	f000 f9ba 	bl	80004f0 <MPU6050_Set_DLPF>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		MPU6050_Read(&hi2c2, &mpu_data);
 800017c:	4937      	ldr	r1, [pc, #220]	; (800025c <main+0x110>)
 800017e:	4836      	ldr	r0, [pc, #216]	; (8000258 <main+0x10c>)
 8000180:	f000 f9cd 	bl	800051e <MPU6050_Read>

		data_frame[0] = (uint8_t) mpu_data.Accel_X_RAW;
 8000184:	4b35      	ldr	r3, [pc, #212]	; (800025c <main+0x110>)
 8000186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800018a:	b2da      	uxtb	r2, r3
 800018c:	4b34      	ldr	r3, [pc, #208]	; (8000260 <main+0x114>)
 800018e:	701a      	strb	r2, [r3, #0]
		data_frame[1] = (uint8_t) (mpu_data.Accel_X_RAW >> 8);
 8000190:	4b32      	ldr	r3, [pc, #200]	; (800025c <main+0x110>)
 8000192:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000196:	121b      	asrs	r3, r3, #8
 8000198:	b21b      	sxth	r3, r3
 800019a:	b2da      	uxtb	r2, r3
 800019c:	4b30      	ldr	r3, [pc, #192]	; (8000260 <main+0x114>)
 800019e:	705a      	strb	r2, [r3, #1]
		data_frame[2] = (uint8_t) mpu_data.Accel_Y_RAW;
 80001a0:	4b2e      	ldr	r3, [pc, #184]	; (800025c <main+0x110>)
 80001a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80001a6:	b2da      	uxtb	r2, r3
 80001a8:	4b2d      	ldr	r3, [pc, #180]	; (8000260 <main+0x114>)
 80001aa:	709a      	strb	r2, [r3, #2]
		data_frame[3] = (uint8_t) (mpu_data.Accel_Y_RAW >> 8);
 80001ac:	4b2b      	ldr	r3, [pc, #172]	; (800025c <main+0x110>)
 80001ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80001b2:	121b      	asrs	r3, r3, #8
 80001b4:	b21b      	sxth	r3, r3
 80001b6:	b2da      	uxtb	r2, r3
 80001b8:	4b29      	ldr	r3, [pc, #164]	; (8000260 <main+0x114>)
 80001ba:	70da      	strb	r2, [r3, #3]
		data_frame[4] = (uint8_t) mpu_data.Accel_Z_RAW;
 80001bc:	4b27      	ldr	r3, [pc, #156]	; (800025c <main+0x110>)
 80001be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80001c2:	b2da      	uxtb	r2, r3
 80001c4:	4b26      	ldr	r3, [pc, #152]	; (8000260 <main+0x114>)
 80001c6:	711a      	strb	r2, [r3, #4]
		data_frame[5] = (uint8_t) (mpu_data.Accel_Z_RAW >> 8);
 80001c8:	4b24      	ldr	r3, [pc, #144]	; (800025c <main+0x110>)
 80001ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80001ce:	121b      	asrs	r3, r3, #8
 80001d0:	b21b      	sxth	r3, r3
 80001d2:	b2da      	uxtb	r2, r3
 80001d4:	4b22      	ldr	r3, [pc, #136]	; (8000260 <main+0x114>)
 80001d6:	715a      	strb	r2, [r3, #5]

		//HAL_UART_Transmit(&huart2, end_frame, 2, HAL_MAX_DELAY);

		//HAL_Delay(100);
		//ssd1306_Emlak();
		ssd1306_SetCursor(0,0);
 80001d8:	2100      	movs	r1, #0
 80001da:	2000      	movs	r0, #0
 80001dc:	f000 fd5a 	bl	8000c94 <ssd1306_SetCursor>
		sprintf(buffer, "AX: %d", mpu_data.Accel_X_RAW);
 80001e0:	4b1e      	ldr	r3, [pc, #120]	; (800025c <main+0x110>)
 80001e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80001e6:	461a      	mov	r2, r3
 80001e8:	463b      	mov	r3, r7
 80001ea:	491e      	ldr	r1, [pc, #120]	; (8000264 <main+0x118>)
 80001ec:	4618      	mov	r0, r3
 80001ee:	f002 fdd1 	bl	8002d94 <siprintf>
		ssd1306_WriteString(buffer, Font_7x10, White);
 80001f2:	4a1d      	ldr	r2, [pc, #116]	; (8000268 <main+0x11c>)
 80001f4:	4638      	mov	r0, r7
 80001f6:	2301      	movs	r3, #1
 80001f8:	ca06      	ldmia	r2, {r1, r2}
 80001fa:	f000 fd25 	bl	8000c48 <ssd1306_WriteString>
		ssd1306_SetCursor(0,10);
 80001fe:	210a      	movs	r1, #10
 8000200:	2000      	movs	r0, #0
 8000202:	f000 fd47 	bl	8000c94 <ssd1306_SetCursor>
		sprintf(buffer, "AY: %d", mpu_data.Accel_Y_RAW);
 8000206:	4b15      	ldr	r3, [pc, #84]	; (800025c <main+0x110>)
 8000208:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800020c:	461a      	mov	r2, r3
 800020e:	463b      	mov	r3, r7
 8000210:	4916      	ldr	r1, [pc, #88]	; (800026c <main+0x120>)
 8000212:	4618      	mov	r0, r3
 8000214:	f002 fdbe 	bl	8002d94 <siprintf>
		ssd1306_WriteString(buffer, Font_7x10, White);
 8000218:	4a13      	ldr	r2, [pc, #76]	; (8000268 <main+0x11c>)
 800021a:	4638      	mov	r0, r7
 800021c:	2301      	movs	r3, #1
 800021e:	ca06      	ldmia	r2, {r1, r2}
 8000220:	f000 fd12 	bl	8000c48 <ssd1306_WriteString>
		ssd1306_SetCursor(0,20);
 8000224:	2114      	movs	r1, #20
 8000226:	2000      	movs	r0, #0
 8000228:	f000 fd34 	bl	8000c94 <ssd1306_SetCursor>
		sprintf(buffer, "AZ: %d", mpu_data.Accel_Z_RAW);
 800022c:	4b0b      	ldr	r3, [pc, #44]	; (800025c <main+0x110>)
 800022e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000232:	461a      	mov	r2, r3
 8000234:	463b      	mov	r3, r7
 8000236:	490e      	ldr	r1, [pc, #56]	; (8000270 <main+0x124>)
 8000238:	4618      	mov	r0, r3
 800023a:	f002 fdab 	bl	8002d94 <siprintf>
		ssd1306_WriteString(buffer, Font_7x10, White);
 800023e:	4a0a      	ldr	r2, [pc, #40]	; (8000268 <main+0x11c>)
 8000240:	4638      	mov	r0, r7
 8000242:	2301      	movs	r3, #1
 8000244:	ca06      	ldmia	r2, {r1, r2}
 8000246:	f000 fcff 	bl	8000c48 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800024a:	f000 fbfb 	bl	8000a44 <ssd1306_UpdateScreen>
		HAL_Delay(20);
 800024e:	2014      	movs	r0, #20
 8000250:	f000 fdcc 	bl	8000dec <HAL_Delay>
		MPU6050_Read(&hi2c2, &mpu_data);
 8000254:	e792      	b.n	800017c <main+0x30>
 8000256:	bf00      	nop
 8000258:	200000d4 	.word	0x200000d4
 800025c:	20000170 	.word	0x20000170
 8000260:	2000017c 	.word	0x2000017c
 8000264:	08003710 	.word	0x08003710
 8000268:	20000004 	.word	0x20000004
 800026c:	08003718 	.word	0x08003718
 8000270:	08003720 	.word	0x08003720

08000274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b090      	sub	sp, #64	; 0x40
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	f107 0318 	add.w	r3, r7, #24
 800027e:	2228      	movs	r2, #40	; 0x28
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f002 fdc0 	bl	8002e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000296:	2302      	movs	r3, #2
 8000298:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029a:	2301      	movs	r3, #1
 800029c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029e:	2310      	movs	r3, #16
 80002a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a2:	2300      	movs	r3, #0
 80002a4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a6:	f107 0318 	add.w	r3, r7, #24
 80002aa:	4618      	mov	r0, r3
 80002ac:	f002 f884 	bl	80023b8 <HAL_RCC_OscConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002b6:	f000 f8cd 	bl	8000454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ba:	230f      	movs	r3, #15
 80002bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002be:	2300      	movs	r3, #0
 80002c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f002 faf2 	bl	80028bc <HAL_RCC_ClockConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002de:	f000 f8b9 	bl	8000454 <Error_Handler>
  }
}
 80002e2:	bf00      	nop
 80002e4:	3740      	adds	r7, #64	; 0x40
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
	...

080002ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002f0:	4b12      	ldr	r3, [pc, #72]	; (800033c <MX_I2C1_Init+0x50>)
 80002f2:	4a13      	ldr	r2, [pc, #76]	; (8000340 <MX_I2C1_Init+0x54>)
 80002f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80002f6:	4b11      	ldr	r3, [pc, #68]	; (800033c <MX_I2C1_Init+0x50>)
 80002f8:	4a12      	ldr	r2, [pc, #72]	; (8000344 <MX_I2C1_Init+0x58>)
 80002fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002fc:	4b0f      	ldr	r3, [pc, #60]	; (800033c <MX_I2C1_Init+0x50>)
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <MX_I2C1_Init+0x50>)
 8000304:	2200      	movs	r2, #0
 8000306:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <MX_I2C1_Init+0x50>)
 800030a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800030e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000310:	4b0a      	ldr	r3, [pc, #40]	; (800033c <MX_I2C1_Init+0x50>)
 8000312:	2200      	movs	r2, #0
 8000314:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000316:	4b09      	ldr	r3, [pc, #36]	; (800033c <MX_I2C1_Init+0x50>)
 8000318:	2200      	movs	r2, #0
 800031a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800031c:	4b07      	ldr	r3, [pc, #28]	; (800033c <MX_I2C1_Init+0x50>)
 800031e:	2200      	movs	r2, #0
 8000320:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000322:	4b06      	ldr	r3, [pc, #24]	; (800033c <MX_I2C1_Init+0x50>)
 8000324:	2200      	movs	r2, #0
 8000326:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000328:	4804      	ldr	r0, [pc, #16]	; (800033c <MX_I2C1_Init+0x50>)
 800032a:	f000 ffeb 	bl	8001304 <HAL_I2C_Init>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000334:	f000 f88e 	bl	8000454 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}
 800033c:	20000080 	.word	0x20000080
 8000340:	40005400 	.word	0x40005400
 8000344:	00061a80 	.word	0x00061a80

08000348 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800034c:	4b12      	ldr	r3, [pc, #72]	; (8000398 <MX_I2C2_Init+0x50>)
 800034e:	4a13      	ldr	r2, [pc, #76]	; (800039c <MX_I2C2_Init+0x54>)
 8000350:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000352:	4b11      	ldr	r3, [pc, #68]	; (8000398 <MX_I2C2_Init+0x50>)
 8000354:	4a12      	ldr	r2, [pc, #72]	; (80003a0 <MX_I2C2_Init+0x58>)
 8000356:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <MX_I2C2_Init+0x50>)
 800035a:	2200      	movs	r2, #0
 800035c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <MX_I2C2_Init+0x50>)
 8000360:	2200      	movs	r2, #0
 8000362:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000364:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <MX_I2C2_Init+0x50>)
 8000366:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800036a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800036c:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <MX_I2C2_Init+0x50>)
 800036e:	2200      	movs	r2, #0
 8000370:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000372:	4b09      	ldr	r3, [pc, #36]	; (8000398 <MX_I2C2_Init+0x50>)
 8000374:	2200      	movs	r2, #0
 8000376:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <MX_I2C2_Init+0x50>)
 800037a:	2200      	movs	r2, #0
 800037c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800037e:	4b06      	ldr	r3, [pc, #24]	; (8000398 <MX_I2C2_Init+0x50>)
 8000380:	2200      	movs	r2, #0
 8000382:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000384:	4804      	ldr	r0, [pc, #16]	; (8000398 <MX_I2C2_Init+0x50>)
 8000386:	f000 ffbd 	bl	8001304 <HAL_I2C_Init>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000390:	f000 f860 	bl	8000454 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}
 8000398:	200000d4 	.word	0x200000d4
 800039c:	40005800 	.word	0x40005800
 80003a0:	000186a0 	.word	0x000186a0

080003a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003a8:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <MX_USART2_UART_Init+0x4c>)
 80003aa:	4a12      	ldr	r2, [pc, #72]	; (80003f4 <MX_USART2_UART_Init+0x50>)
 80003ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003ae:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <MX_USART2_UART_Init+0x4c>)
 80003b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003b6:	4b0e      	ldr	r3, [pc, #56]	; (80003f0 <MX_USART2_UART_Init+0x4c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <MX_USART2_UART_Init+0x4c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003c2:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <MX_USART2_UART_Init+0x4c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003c8:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <MX_USART2_UART_Init+0x4c>)
 80003ca:	220c      	movs	r2, #12
 80003cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ce:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <MX_USART2_UART_Init+0x4c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <MX_USART2_UART_Init+0x4c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003da:	4805      	ldr	r0, [pc, #20]	; (80003f0 <MX_USART2_UART_Init+0x4c>)
 80003dc:	f002 fbfc 	bl	8002bd8 <HAL_UART_Init>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003e6:	f000 f835 	bl	8000454 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	20000128 	.word	0x20000128
 80003f4:	40004400 	.word	0x40004400

080003f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003fe:	4b14      	ldr	r3, [pc, #80]	; (8000450 <MX_GPIO_Init+0x58>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	4a13      	ldr	r2, [pc, #76]	; (8000450 <MX_GPIO_Init+0x58>)
 8000404:	f043 0320 	orr.w	r3, r3, #32
 8000408:	6193      	str	r3, [r2, #24]
 800040a:	4b11      	ldr	r3, [pc, #68]	; (8000450 <MX_GPIO_Init+0x58>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	f003 0320 	and.w	r3, r3, #32
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <MX_GPIO_Init+0x58>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	4a0d      	ldr	r2, [pc, #52]	; (8000450 <MX_GPIO_Init+0x58>)
 800041c:	f043 0304 	orr.w	r3, r3, #4
 8000420:	6193      	str	r3, [r2, #24]
 8000422:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <MX_GPIO_Init+0x58>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	f003 0304 	and.w	r3, r3, #4
 800042a:	60bb      	str	r3, [r7, #8]
 800042c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800042e:	4b08      	ldr	r3, [pc, #32]	; (8000450 <MX_GPIO_Init+0x58>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	4a07      	ldr	r2, [pc, #28]	; (8000450 <MX_GPIO_Init+0x58>)
 8000434:	f043 0308 	orr.w	r3, r3, #8
 8000438:	6193      	str	r3, [r2, #24]
 800043a:	4b05      	ldr	r3, [pc, #20]	; (8000450 <MX_GPIO_Init+0x58>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	f003 0308 	and.w	r3, r3, #8
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000446:	bf00      	nop
 8000448:	3714      	adds	r7, #20
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr
 8000450:	40021000 	.word	0x40021000

08000454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000458:	b672      	cpsid	i
}
 800045a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800045c:	e7fe      	b.n	800045c <Error_Handler+0x8>

0800045e <MPU6050_Init>:
 *
 * @note			-
 *****************************************************************************/

void MPU6050_Init(I2C_HandleTypeDef *pI2C_Handle)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	b086      	sub	sp, #24
 8000462:	af04      	add	r7, sp, #16
 8000464:	6078      	str	r0, [r7, #4]

	HAL_I2C_Mem_Write(pI2C_Handle, MPU6050_ADDR, MPU6050_SMPLRT_DIV, 1, (uint8_t*) 0x07, 1, HAL_MAX_DELAY);// Setting The Sample (Data) Rate
 8000466:	f04f 33ff 	mov.w	r3, #4294967295
 800046a:	9302      	str	r3, [sp, #8]
 800046c:	2301      	movs	r3, #1
 800046e:	9301      	str	r3, [sp, #4]
 8000470:	2307      	movs	r3, #7
 8000472:	9300      	str	r3, [sp, #0]
 8000474:	2301      	movs	r3, #1
 8000476:	2219      	movs	r2, #25
 8000478:	21d0      	movs	r1, #208	; 0xd0
 800047a:	6878      	ldr	r0, [r7, #4]
 800047c:	f001 f886 	bl	800158c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(pI2C_Handle, MPU6050_ADDR, MPU6050_PWR_MGMT_1, 1, (uint8_t*) 0x00, 1, HAL_MAX_DELAY);// Setting The Clock Source
 8000480:	f04f 33ff 	mov.w	r3, #4294967295
 8000484:	9302      	str	r3, [sp, #8]
 8000486:	2301      	movs	r3, #1
 8000488:	9301      	str	r3, [sp, #4]
 800048a:	2300      	movs	r3, #0
 800048c:	9300      	str	r3, [sp, #0]
 800048e:	2301      	movs	r3, #1
 8000490:	226b      	movs	r2, #107	; 0x6b
 8000492:	21d0      	movs	r1, #208	; 0xd0
 8000494:	6878      	ldr	r0, [r7, #4]
 8000496:	f001 f879 	bl	800158c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(pI2C_Handle, MPU6050_ADDR, MPU6050_ACCEL_CONFIG, 1, (uint8_t*) 0x00, 1, HAL_MAX_DELAY);// Configure The ACCEL (FSR= +-2g)
 800049a:	f04f 33ff 	mov.w	r3, #4294967295
 800049e:	9302      	str	r3, [sp, #8]
 80004a0:	2301      	movs	r3, #1
 80004a2:	9301      	str	r3, [sp, #4]
 80004a4:	2300      	movs	r3, #0
 80004a6:	9300      	str	r3, [sp, #0]
 80004a8:	2301      	movs	r3, #1
 80004aa:	221c      	movs	r2, #28
 80004ac:	21d0      	movs	r1, #208	; 0xd0
 80004ae:	6878      	ldr	r0, [r7, #4]
 80004b0:	f001 f86c 	bl	800158c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(pI2C_Handle, MPU6050_ADDR, MPU6050_GYRO_CONFIG, 1, (uint8_t*) 0x18, 1, HAL_MAX_DELAY);// Configure The GYRO (FSR= +-2000d/s)
 80004b4:	f04f 33ff 	mov.w	r3, #4294967295
 80004b8:	9302      	str	r3, [sp, #8]
 80004ba:	2301      	movs	r3, #1
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2318      	movs	r3, #24
 80004c0:	9300      	str	r3, [sp, #0]
 80004c2:	2301      	movs	r3, #1
 80004c4:	221b      	movs	r2, #27
 80004c6:	21d0      	movs	r1, #208	; 0xd0
 80004c8:	6878      	ldr	r0, [r7, #4]
 80004ca:	f001 f85f 	bl	800158c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(pI2C_Handle, MPU6050_ADDR, MPU6050_INT_ENABLE, 1, (uint8_t*) 0x01, 1, HAL_MAX_DELAY);// Enable Data Ready Interrupts
 80004ce:	f04f 33ff 	mov.w	r3, #4294967295
 80004d2:	9302      	str	r3, [sp, #8]
 80004d4:	2301      	movs	r3, #1
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	2301      	movs	r3, #1
 80004da:	9300      	str	r3, [sp, #0]
 80004dc:	2301      	movs	r3, #1
 80004de:	2238      	movs	r2, #56	; 0x38
 80004e0:	21d0      	movs	r1, #208	; 0xd0
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	f001 f852 	bl	800158c <HAL_I2C_Mem_Write>

}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <MPU6050_Set_DLPF>:
 *
 * @note			-
 *****************************************************************************/

void MPU6050_Set_DLPF(I2C_HandleTypeDef *pI2C_Handle,uint8_t MPU6050_DLPF_macro)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af04      	add	r7, sp, #16
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	460b      	mov	r3, r1
 80004fa:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(pI2C_Handle, MPU6050_ADDR, MPU6050_CONFIG, 1, &MPU6050_DLPF_macro, 1, HAL_MAX_DELAY);
 80004fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000500:	9302      	str	r3, [sp, #8]
 8000502:	2301      	movs	r3, #1
 8000504:	9301      	str	r3, [sp, #4]
 8000506:	1cfb      	adds	r3, r7, #3
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	2301      	movs	r3, #1
 800050c:	221a      	movs	r2, #26
 800050e:	21d0      	movs	r1, #208	; 0xd0
 8000510:	6878      	ldr	r0, [r7, #4]
 8000512:	f001 f83b 	bl	800158c <HAL_I2C_Mem_Write>
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}

0800051e <MPU6050_Read>:
 *
 * @note			-
 *****************************************************************************/

void MPU6050_Read(I2C_HandleTypeDef *pI2C_Handle, MPU6050_typeDef *pDataStruct)
{
 800051e:	b580      	push	{r7, lr}
 8000520:	b08a      	sub	sp, #40	; 0x28
 8000522:	af04      	add	r7, sp, #16
 8000524:	6078      	str	r0, [r7, #4]
 8000526:	6039      	str	r1, [r7, #0]
	uint8_t mpu_data[12];

	HAL_I2C_Mem_Read(pI2C_Handle, MPU6050_ADDR, MPU6050_ACCEL_XOUT_H, 1, mpu_data, 12, HAL_MAX_DELAY);
 8000528:	f04f 33ff 	mov.w	r3, #4294967295
 800052c:	9302      	str	r3, [sp, #8]
 800052e:	230c      	movs	r3, #12
 8000530:	9301      	str	r3, [sp, #4]
 8000532:	f107 030c 	add.w	r3, r7, #12
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	2301      	movs	r3, #1
 800053a:	223b      	movs	r2, #59	; 0x3b
 800053c:	21d0      	movs	r1, #208	; 0xd0
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f001 f91e 	bl	8001780 <HAL_I2C_Mem_Read>

	pDataStruct->Accel_X_RAW = (int16_t) (mpu_data[0] << 8 | mpu_data[1]);
 8000544:	7b3b      	ldrb	r3, [r7, #12]
 8000546:	021b      	lsls	r3, r3, #8
 8000548:	b21a      	sxth	r2, r3
 800054a:	7b7b      	ldrb	r3, [r7, #13]
 800054c:	b21b      	sxth	r3, r3
 800054e:	4313      	orrs	r3, r2
 8000550:	b21a      	sxth	r2, r3
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	801a      	strh	r2, [r3, #0]
	pDataStruct->Accel_Y_RAW = (int16_t) (mpu_data[2] << 8 | mpu_data[3]);
 8000556:	7bbb      	ldrb	r3, [r7, #14]
 8000558:	021b      	lsls	r3, r3, #8
 800055a:	b21a      	sxth	r2, r3
 800055c:	7bfb      	ldrb	r3, [r7, #15]
 800055e:	b21b      	sxth	r3, r3
 8000560:	4313      	orrs	r3, r2
 8000562:	b21a      	sxth	r2, r3
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	805a      	strh	r2, [r3, #2]
	pDataStruct->Accel_Z_RAW = (int16_t) (mpu_data[4] << 8 | mpu_data[5]);
 8000568:	7c3b      	ldrb	r3, [r7, #16]
 800056a:	021b      	lsls	r3, r3, #8
 800056c:	b21a      	sxth	r2, r3
 800056e:	7c7b      	ldrb	r3, [r7, #17]
 8000570:	b21b      	sxth	r3, r3
 8000572:	4313      	orrs	r3, r2
 8000574:	b21a      	sxth	r2, r3
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	809a      	strh	r2, [r3, #4]
	pDataStruct->Gyro_X_RAW  = (int16_t) (mpu_data[6] << 8 | mpu_data[7]);
 800057a:	7cbb      	ldrb	r3, [r7, #18]
 800057c:	021b      	lsls	r3, r3, #8
 800057e:	b21a      	sxth	r2, r3
 8000580:	7cfb      	ldrb	r3, [r7, #19]
 8000582:	b21b      	sxth	r3, r3
 8000584:	4313      	orrs	r3, r2
 8000586:	b21a      	sxth	r2, r3
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	80da      	strh	r2, [r3, #6]
	pDataStruct->Gyro_Y_RAW  = (int16_t) (mpu_data[8] << 8 | mpu_data[9]);
 800058c:	7d3b      	ldrb	r3, [r7, #20]
 800058e:	021b      	lsls	r3, r3, #8
 8000590:	b21a      	sxth	r2, r3
 8000592:	7d7b      	ldrb	r3, [r7, #21]
 8000594:	b21b      	sxth	r3, r3
 8000596:	4313      	orrs	r3, r2
 8000598:	b21a      	sxth	r2, r3
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	811a      	strh	r2, [r3, #8]
	pDataStruct->Gyro_Z_RAW  = (int16_t) (mpu_data[10] << 8 | mpu_data[11]);
 800059e:	7dbb      	ldrb	r3, [r7, #22]
 80005a0:	021b      	lsls	r3, r3, #8
 80005a2:	b21a      	sxth	r2, r3
 80005a4:	7dfb      	ldrb	r3, [r7, #23]
 80005a6:	b21b      	sxth	r3, r3
 80005a8:	4313      	orrs	r3, r2
 80005aa:	b21a      	sxth	r2, r3
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	815a      	strh	r2, [r3, #10]
}
 80005b0:	bf00      	nop
 80005b2:	3718      	adds	r7, #24
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005be:	4b15      	ldr	r3, [pc, #84]	; (8000614 <HAL_MspInit+0x5c>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	4a14      	ldr	r2, [pc, #80]	; (8000614 <HAL_MspInit+0x5c>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6193      	str	r3, [r2, #24]
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <HAL_MspInit+0x5c>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <HAL_MspInit+0x5c>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <HAL_MspInit+0x5c>)
 80005dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e0:	61d3      	str	r3, [r2, #28]
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <HAL_MspInit+0x5c>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <HAL_MspInit+0x60>)
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	4a04      	ldr	r2, [pc, #16]	; (8000618 <HAL_MspInit+0x60>)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr
 8000614:	40021000 	.word	0x40021000
 8000618:	40010000 	.word	0x40010000

0800061c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08c      	sub	sp, #48	; 0x30
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000624:	f107 031c 	add.w	r3, r7, #28
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a32      	ldr	r2, [pc, #200]	; (8000700 <HAL_I2C_MspInit+0xe4>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d133      	bne.n	80006a4 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800063c:	4b31      	ldr	r3, [pc, #196]	; (8000704 <HAL_I2C_MspInit+0xe8>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a30      	ldr	r2, [pc, #192]	; (8000704 <HAL_I2C_MspInit+0xe8>)
 8000642:	f043 0308 	orr.w	r3, r3, #8
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b2e      	ldr	r3, [pc, #184]	; (8000704 <HAL_I2C_MspInit+0xe8>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f003 0308 	and.w	r3, r3, #8
 8000650:	61bb      	str	r3, [r7, #24]
 8000652:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Oled_SCL_Pin|Oled_SDA_Pin;
 8000654:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800065a:	2312      	movs	r3, #18
 800065c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800065e:	2303      	movs	r3, #3
 8000660:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	4619      	mov	r1, r3
 8000668:	4827      	ldr	r0, [pc, #156]	; (8000708 <HAL_I2C_MspInit+0xec>)
 800066a:	f000 fcc7 	bl	8000ffc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800066e:	4b27      	ldr	r3, [pc, #156]	; (800070c <HAL_I2C_MspInit+0xf0>)
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000676:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800067a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800067c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800067e:	f043 0302 	orr.w	r3, r3, #2
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000684:	4a21      	ldr	r2, [pc, #132]	; (800070c <HAL_I2C_MspInit+0xf0>)
 8000686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000688:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800068a:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <HAL_I2C_MspInit+0xe8>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	4a1d      	ldr	r2, [pc, #116]	; (8000704 <HAL_I2C_MspInit+0xe8>)
 8000690:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000694:	61d3      	str	r3, [r2, #28]
 8000696:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <HAL_I2C_MspInit+0xe8>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80006a2:	e029      	b.n	80006f8 <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a19      	ldr	r2, [pc, #100]	; (8000710 <HAL_I2C_MspInit+0xf4>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d124      	bne.n	80006f8 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ae:	4b15      	ldr	r3, [pc, #84]	; (8000704 <HAL_I2C_MspInit+0xe8>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	4a14      	ldr	r2, [pc, #80]	; (8000704 <HAL_I2C_MspInit+0xe8>)
 80006b4:	f043 0308 	orr.w	r3, r3, #8
 80006b8:	6193      	str	r3, [r2, #24]
 80006ba:	4b12      	ldr	r3, [pc, #72]	; (8000704 <HAL_I2C_MspInit+0xe8>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	f003 0308 	and.w	r3, r3, #8
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Mpu_SCL_Pin|Mpu_SDA_Pin;
 80006c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80006ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006cc:	2312      	movs	r3, #18
 80006ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d0:	2303      	movs	r3, #3
 80006d2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4619      	mov	r1, r3
 80006da:	480b      	ldr	r0, [pc, #44]	; (8000708 <HAL_I2C_MspInit+0xec>)
 80006dc:	f000 fc8e 	bl	8000ffc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <HAL_I2C_MspInit+0xe8>)
 80006e2:	69db      	ldr	r3, [r3, #28]
 80006e4:	4a07      	ldr	r2, [pc, #28]	; (8000704 <HAL_I2C_MspInit+0xe8>)
 80006e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006ea:	61d3      	str	r3, [r2, #28]
 80006ec:	4b05      	ldr	r3, [pc, #20]	; (8000704 <HAL_I2C_MspInit+0xe8>)
 80006ee:	69db      	ldr	r3, [r3, #28]
 80006f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	68fb      	ldr	r3, [r7, #12]
}
 80006f8:	bf00      	nop
 80006fa:	3730      	adds	r7, #48	; 0x30
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40005400 	.word	0x40005400
 8000704:	40021000 	.word	0x40021000
 8000708:	40010c00 	.word	0x40010c00
 800070c:	40010000 	.word	0x40010000
 8000710:	40005800 	.word	0x40005800

08000714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a1b      	ldr	r2, [pc, #108]	; (800079c <HAL_UART_MspInit+0x88>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d12f      	bne.n	8000794 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <HAL_UART_MspInit+0x8c>)
 8000736:	69db      	ldr	r3, [r3, #28]
 8000738:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <HAL_UART_MspInit+0x8c>)
 800073a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800073e:	61d3      	str	r3, [r2, #28]
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <HAL_UART_MspInit+0x8c>)
 8000742:	69db      	ldr	r3, [r3, #28]
 8000744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <HAL_UART_MspInit+0x8c>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <HAL_UART_MspInit+0x8c>)
 8000752:	f043 0304 	orr.w	r3, r3, #4
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <HAL_UART_MspInit+0x8c>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f003 0304 	and.w	r3, r3, #4
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000764:	2304      	movs	r3, #4
 8000766:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000768:	2302      	movs	r3, #2
 800076a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800076c:	2303      	movs	r3, #3
 800076e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	f107 0310 	add.w	r3, r7, #16
 8000774:	4619      	mov	r1, r3
 8000776:	480b      	ldr	r0, [pc, #44]	; (80007a4 <HAL_UART_MspInit+0x90>)
 8000778:	f000 fc40 	bl	8000ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800077c:	2308      	movs	r3, #8
 800077e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	4619      	mov	r1, r3
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <HAL_UART_MspInit+0x90>)
 8000790:	f000 fc34 	bl	8000ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000794:	bf00      	nop
 8000796:	3720      	adds	r7, #32
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40004400 	.word	0x40004400
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40010800 	.word	0x40010800

080007a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <NMI_Handler+0x4>

080007ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <HardFault_Handler+0x4>

080007b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <MemManage_Handler+0x4>

080007ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <BusFault_Handler+0x4>

080007c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <UsageFault_Handler+0x4>

080007c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr

080007d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr

080007de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ee:	f000 fae1 	bl	8000db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000800:	4a14      	ldr	r2, [pc, #80]	; (8000854 <_sbrk+0x5c>)
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <_sbrk+0x60>)
 8000804:	1ad3      	subs	r3, r2, r3
 8000806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800080c:	4b13      	ldr	r3, [pc, #76]	; (800085c <_sbrk+0x64>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d102      	bne.n	800081a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <_sbrk+0x64>)
 8000816:	4a12      	ldr	r2, [pc, #72]	; (8000860 <_sbrk+0x68>)
 8000818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <_sbrk+0x64>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	693a      	ldr	r2, [r7, #16]
 8000824:	429a      	cmp	r2, r3
 8000826:	d207      	bcs.n	8000838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000828:	f002 faf6 	bl	8002e18 <__errno>
 800082c:	4603      	mov	r3, r0
 800082e:	220c      	movs	r2, #12
 8000830:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
 8000836:	e009      	b.n	800084c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <_sbrk+0x64>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800083e:	4b07      	ldr	r3, [pc, #28]	; (800085c <_sbrk+0x64>)
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4413      	add	r3, r2
 8000846:	4a05      	ldr	r2, [pc, #20]	; (800085c <_sbrk+0x64>)
 8000848:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800084a:	68fb      	ldr	r3, [r7, #12]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3718      	adds	r7, #24
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20005000 	.word	0x20005000
 8000858:	00000400 	.word	0x00000400
 800085c:	20000184 	.word	0x20000184
 8000860:	200006e0 	.word	0x200006e0

08000864 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr

08000870 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000870:	f7ff fff8 	bl	8000864 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000876:	490c      	ldr	r1, [pc, #48]	; (80008a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000878:	4a0c      	ldr	r2, [pc, #48]	; (80008ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800087c:	e002      	b.n	8000884 <LoopCopyDataInit>

0800087e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800087e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000882:	3304      	adds	r3, #4

08000884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000888:	d3f9      	bcc.n	800087e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800088a:	4a09      	ldr	r2, [pc, #36]	; (80008b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800088c:	4c09      	ldr	r4, [pc, #36]	; (80008b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000890:	e001      	b.n	8000896 <LoopFillZerobss>

08000892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000894:	3204      	adds	r2, #4

08000896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000898:	d3fb      	bcc.n	8000892 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800089a:	f002 fac3 	bl	8002e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800089e:	f7ff fc55 	bl	800014c <main>
  bx lr
 80008a2:	4770      	bx	lr
  ldr r0, =_sdata
 80008a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80008ac:	08003efc 	.word	0x08003efc
  ldr r2, =_sbss
 80008b0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80008b4:	200006dc 	.word	0x200006dc

080008b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b8:	e7fe      	b.n	80008b8 <ADC1_2_IRQHandler>

080008ba <ssd1306_Reset>:
#include <string.h>  // For memcpy


#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr
	...

080008c8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af04      	add	r7, sp, #16
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295
 80008d6:	9302      	str	r3, [sp, #8]
 80008d8:	2301      	movs	r3, #1
 80008da:	9301      	str	r3, [sp, #4]
 80008dc:	1dfb      	adds	r3, r7, #7
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	2301      	movs	r3, #1
 80008e2:	2200      	movs	r2, #0
 80008e4:	2178      	movs	r1, #120	; 0x78
 80008e6:	4803      	ldr	r0, [pc, #12]	; (80008f4 <ssd1306_WriteCommand+0x2c>)
 80008e8:	f000 fe50 	bl	800158c <HAL_I2C_Mem_Write>
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000080 	.word	0x20000080

080008f8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af04      	add	r7, sp, #16
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	b29b      	uxth	r3, r3
 8000906:	f04f 32ff 	mov.w	r2, #4294967295
 800090a:	9202      	str	r2, [sp, #8]
 800090c:	9301      	str	r3, [sp, #4]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	2301      	movs	r3, #1
 8000914:	2240      	movs	r2, #64	; 0x40
 8000916:	2178      	movs	r1, #120	; 0x78
 8000918:	4803      	ldr	r0, [pc, #12]	; (8000928 <ssd1306_WriteData+0x30>)
 800091a:	f000 fe37 	bl	800158c <HAL_I2C_Mem_Write>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000080 	.word	0x20000080

0800092c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000930:	f7ff ffc3 	bl	80008ba <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000934:	2064      	movs	r0, #100	; 0x64
 8000936:	f000 fa59 	bl	8000dec <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800093a:	2000      	movs	r0, #0
 800093c:	f000 f9d6 	bl	8000cec <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000940:	2020      	movs	r0, #32
 8000942:	f7ff ffc1 	bl	80008c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000946:	2000      	movs	r0, #0
 8000948:	f7ff ffbe 	bl	80008c8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800094c:	20b0      	movs	r0, #176	; 0xb0
 800094e:	f7ff ffbb 	bl	80008c8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000952:	20c8      	movs	r0, #200	; 0xc8
 8000954:	f7ff ffb8 	bl	80008c8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff ffb5 	bl	80008c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800095e:	2010      	movs	r0, #16
 8000960:	f7ff ffb2 	bl	80008c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000964:	2040      	movs	r0, #64	; 0x40
 8000966:	f7ff ffaf 	bl	80008c8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800096a:	20ff      	movs	r0, #255	; 0xff
 800096c:	f000 f9aa 	bl	8000cc4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000970:	20a1      	movs	r0, #161	; 0xa1
 8000972:	f7ff ffa9 	bl	80008c8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000976:	20a6      	movs	r0, #166	; 0xa6
 8000978:	f7ff ffa6 	bl	80008c8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800097c:	20a8      	movs	r0, #168	; 0xa8
 800097e:	f7ff ffa3 	bl	80008c8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000982:	203f      	movs	r0, #63	; 0x3f
 8000984:	f7ff ffa0 	bl	80008c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000988:	20a4      	movs	r0, #164	; 0xa4
 800098a:	f7ff ff9d 	bl	80008c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800098e:	20d3      	movs	r0, #211	; 0xd3
 8000990:	f7ff ff9a 	bl	80008c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000994:	2000      	movs	r0, #0
 8000996:	f7ff ff97 	bl	80008c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800099a:	20d5      	movs	r0, #213	; 0xd5
 800099c:	f7ff ff94 	bl	80008c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80009a0:	20f0      	movs	r0, #240	; 0xf0
 80009a2:	f7ff ff91 	bl	80008c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80009a6:	20d9      	movs	r0, #217	; 0xd9
 80009a8:	f7ff ff8e 	bl	80008c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80009ac:	2022      	movs	r0, #34	; 0x22
 80009ae:	f7ff ff8b 	bl	80008c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80009b2:	20da      	movs	r0, #218	; 0xda
 80009b4:	f7ff ff88 	bl	80008c8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80009b8:	2012      	movs	r0, #18
 80009ba:	f7ff ff85 	bl	80008c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80009be:	20db      	movs	r0, #219	; 0xdb
 80009c0:	f7ff ff82 	bl	80008c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80009c4:	2020      	movs	r0, #32
 80009c6:	f7ff ff7f 	bl	80008c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80009ca:	208d      	movs	r0, #141	; 0x8d
 80009cc:	f7ff ff7c 	bl	80008c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80009d0:	2014      	movs	r0, #20
 80009d2:	f7ff ff79 	bl	80008c8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80009d6:	2001      	movs	r0, #1
 80009d8:	f000 f988 	bl	8000cec <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80009dc:	2000      	movs	r0, #0
 80009de:	f000 f80f 	bl	8000a00 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80009e2:	f000 f82f 	bl	8000a44 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80009e6:	4b05      	ldr	r3, [pc, #20]	; (80009fc <ssd1306_Init+0xd0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <ssd1306_Init+0xd0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80009f2:	4b02      	ldr	r3, [pc, #8]	; (80009fc <ssd1306_Init+0xd0>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	711a      	strb	r2, [r3, #4]
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000588 	.word	0x20000588

08000a00 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	e00d      	b.n	8000a2c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d101      	bne.n	8000a1a <ssd1306_Fill+0x1a>
 8000a16:	2100      	movs	r1, #0
 8000a18:	e000      	b.n	8000a1c <ssd1306_Fill+0x1c>
 8000a1a:	21ff      	movs	r1, #255	; 0xff
 8000a1c:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <ssd1306_Fill+0x40>)
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	4413      	add	r3, r2
 8000a22:	460a      	mov	r2, r1
 8000a24:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a32:	d3ed      	bcc.n	8000a10 <ssd1306_Fill+0x10>
    }
}
 8000a34:	bf00      	nop
 8000a36:	bf00      	nop
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr
 8000a40:	20000188 	.word	0x20000188

08000a44 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	71fb      	strb	r3, [r7, #7]
 8000a4e:	e016      	b.n	8000a7e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	3b50      	subs	r3, #80	; 0x50
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff ff36 	bl	80008c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f7ff ff33 	bl	80008c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000a62:	2010      	movs	r0, #16
 8000a64:	f7ff ff30 	bl	80008c8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	01db      	lsls	r3, r3, #7
 8000a6c:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <ssd1306_UpdateScreen+0x4c>)
 8000a6e:	4413      	add	r3, r2
 8000a70:	2180      	movs	r1, #128	; 0x80
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff ff40 	bl	80008f8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	71fb      	strb	r3, [r7, #7]
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	2b07      	cmp	r3, #7
 8000a82:	d9e5      	bls.n	8000a50 <ssd1306_UpdateScreen+0xc>
    }
}
 8000a84:	bf00      	nop
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000188 	.word	0x20000188

08000a94 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	71bb      	strb	r3, [r7, #6]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	db3d      	blt.n	8000b2a <ssd1306_DrawPixel+0x96>
 8000aae:	79bb      	ldrb	r3, [r7, #6]
 8000ab0:	2b3f      	cmp	r3, #63	; 0x3f
 8000ab2:	d83a      	bhi.n	8000b2a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000ab4:	797b      	ldrb	r3, [r7, #5]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d11a      	bne.n	8000af0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000aba:	79fa      	ldrb	r2, [r7, #7]
 8000abc:	79bb      	ldrb	r3, [r7, #6]
 8000abe:	08db      	lsrs	r3, r3, #3
 8000ac0:	b2d8      	uxtb	r0, r3
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	01db      	lsls	r3, r3, #7
 8000ac6:	4413      	add	r3, r2
 8000ac8:	4a1a      	ldr	r2, [pc, #104]	; (8000b34 <ssd1306_DrawPixel+0xa0>)
 8000aca:	5cd3      	ldrb	r3, [r2, r3]
 8000acc:	b25a      	sxtb	r2, r3
 8000ace:	79bb      	ldrb	r3, [r7, #6]
 8000ad0:	f003 0307 	and.w	r3, r3, #7
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ada:	b25b      	sxtb	r3, r3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	b259      	sxtb	r1, r3
 8000ae0:	79fa      	ldrb	r2, [r7, #7]
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	01db      	lsls	r3, r3, #7
 8000ae6:	4413      	add	r3, r2
 8000ae8:	b2c9      	uxtb	r1, r1
 8000aea:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <ssd1306_DrawPixel+0xa0>)
 8000aec:	54d1      	strb	r1, [r2, r3]
 8000aee:	e01d      	b.n	8000b2c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000af0:	79fa      	ldrb	r2, [r7, #7]
 8000af2:	79bb      	ldrb	r3, [r7, #6]
 8000af4:	08db      	lsrs	r3, r3, #3
 8000af6:	b2d8      	uxtb	r0, r3
 8000af8:	4603      	mov	r3, r0
 8000afa:	01db      	lsls	r3, r3, #7
 8000afc:	4413      	add	r3, r2
 8000afe:	4a0d      	ldr	r2, [pc, #52]	; (8000b34 <ssd1306_DrawPixel+0xa0>)
 8000b00:	5cd3      	ldrb	r3, [r2, r3]
 8000b02:	b25a      	sxtb	r2, r3
 8000b04:	79bb      	ldrb	r3, [r7, #6]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b10:	b25b      	sxtb	r3, r3
 8000b12:	43db      	mvns	r3, r3
 8000b14:	b25b      	sxtb	r3, r3
 8000b16:	4013      	ands	r3, r2
 8000b18:	b259      	sxtb	r1, r3
 8000b1a:	79fa      	ldrb	r2, [r7, #7]
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	01db      	lsls	r3, r3, #7
 8000b20:	4413      	add	r3, r2
 8000b22:	b2c9      	uxtb	r1, r1
 8000b24:	4a03      	ldr	r2, [pc, #12]	; (8000b34 <ssd1306_DrawPixel+0xa0>)
 8000b26:	54d1      	strb	r1, [r2, r3]
 8000b28:	e000      	b.n	8000b2c <ssd1306_DrawPixel+0x98>
        return;
 8000b2a:	bf00      	nop
    }
}
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	20000188 	.word	0x20000188

08000b38 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b089      	sub	sp, #36	; 0x24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4604      	mov	r4, r0
 8000b40:	1d38      	adds	r0, r7, #4
 8000b42:	e880 0006 	stmia.w	r0, {r1, r2}
 8000b46:	461a      	mov	r2, r3
 8000b48:	4623      	mov	r3, r4
 8000b4a:	73fb      	strb	r3, [r7, #15]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
 8000b52:	2b1f      	cmp	r3, #31
 8000b54:	d902      	bls.n	8000b5c <ssd1306_WriteChar+0x24>
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	2b7e      	cmp	r3, #126	; 0x7e
 8000b5a:	d901      	bls.n	8000b60 <ssd1306_WriteChar+0x28>
        return 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	e06d      	b.n	8000c3c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000b60:	4b38      	ldr	r3, [pc, #224]	; (8000c44 <ssd1306_WriteChar+0x10c>)
 8000b62:	881b      	ldrh	r3, [r3, #0]
 8000b64:	461a      	mov	r2, r3
 8000b66:	793b      	ldrb	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	2b80      	cmp	r3, #128	; 0x80
 8000b6c:	dc06      	bgt.n	8000b7c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000b6e:	4b35      	ldr	r3, [pc, #212]	; (8000c44 <ssd1306_WriteChar+0x10c>)
 8000b70:	885b      	ldrh	r3, [r3, #2]
 8000b72:	461a      	mov	r2, r3
 8000b74:	797b      	ldrb	r3, [r7, #5]
 8000b76:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000b78:	2b40      	cmp	r3, #64	; 0x40
 8000b7a:	dd01      	ble.n	8000b80 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	e05d      	b.n	8000c3c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
 8000b84:	e04c      	b.n	8000c20 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	3b20      	subs	r3, #32
 8000b8c:	7979      	ldrb	r1, [r7, #5]
 8000b8e:	fb01 f303 	mul.w	r3, r1, r3
 8000b92:	4619      	mov	r1, r3
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	440b      	add	r3, r1
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	4413      	add	r3, r2
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61bb      	str	r3, [r7, #24]
 8000ba4:	e034      	b.n	8000c10 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000ba6:	697a      	ldr	r2, [r7, #20]
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d012      	beq.n	8000bdc <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000bb6:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <ssd1306_WriteChar+0x10c>)
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	4413      	add	r3, r2
 8000bc2:	b2d8      	uxtb	r0, r3
 8000bc4:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <ssd1306_WriteChar+0x10c>)
 8000bc6:	885b      	ldrh	r3, [r3, #2]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	4413      	add	r3, r2
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	7bba      	ldrb	r2, [r7, #14]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f7ff ff5d 	bl	8000a94 <ssd1306_DrawPixel>
 8000bda:	e016      	b.n	8000c0a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000bdc:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <ssd1306_WriteChar+0x10c>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	4413      	add	r3, r2
 8000be8:	b2d8      	uxtb	r0, r3
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <ssd1306_WriteChar+0x10c>)
 8000bec:	885b      	ldrh	r3, [r3, #2]
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	4413      	add	r3, r2
 8000bf6:	b2d9      	uxtb	r1, r3
 8000bf8:	7bbb      	ldrb	r3, [r7, #14]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	bf0c      	ite	eq
 8000bfe:	2301      	moveq	r3, #1
 8000c00:	2300      	movne	r3, #0
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	461a      	mov	r2, r3
 8000c06:	f7ff ff45 	bl	8000a94 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	61bb      	str	r3, [r7, #24]
 8000c10:	793b      	ldrb	r3, [r7, #4]
 8000c12:	461a      	mov	r2, r3
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d3c5      	bcc.n	8000ba6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	61fb      	str	r3, [r7, #28]
 8000c20:	797b      	ldrb	r3, [r7, #5]
 8000c22:	461a      	mov	r2, r3
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d3ad      	bcc.n	8000b86 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <ssd1306_WriteChar+0x10c>)
 8000c2c:	881a      	ldrh	r2, [r3, #0]
 8000c2e:	793b      	ldrb	r3, [r7, #4]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	4413      	add	r3, r2
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <ssd1306_WriteChar+0x10c>)
 8000c38:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3724      	adds	r7, #36	; 0x24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd90      	pop	{r4, r7, pc}
 8000c44:	20000588 	.word	0x20000588

08000c48 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	1d38      	adds	r0, r7, #4
 8000c52:	e880 0006 	stmia.w	r0, {r1, r2}
 8000c56:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000c58:	e012      	b.n	8000c80 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	7818      	ldrb	r0, [r3, #0]
 8000c5e:	78fb      	ldrb	r3, [r7, #3]
 8000c60:	1d3a      	adds	r2, r7, #4
 8000c62:	ca06      	ldmia	r2, {r1, r2}
 8000c64:	f7ff ff68 	bl	8000b38 <ssd1306_WriteChar>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d002      	beq.n	8000c7a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	e008      	b.n	8000c8c <ssd1306_WriteString+0x44>
        }
        str++;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d1e8      	bne.n	8000c5a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	781b      	ldrb	r3, [r3, #0]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	460a      	mov	r2, r1
 8000c9e:	71fb      	strb	r3, [r7, #7]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <ssd1306_SetCursor+0x2c>)
 8000caa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000cac:	79bb      	ldrb	r3, [r7, #6]
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <ssd1306_SetCursor+0x2c>)
 8000cb2:	805a      	strh	r2, [r3, #2]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20000588 	.word	0x20000588

08000cc4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000cce:	2381      	movs	r3, #129	; 0x81
 8000cd0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fdf7 	bl	80008c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fdf3 	bl	80008c8 <ssd1306_WriteCommand>
}
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d005      	beq.n	8000d08 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000cfc:	23af      	movs	r3, #175	; 0xaf
 8000cfe:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <ssd1306_SetDisplayOn+0x38>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	715a      	strb	r2, [r3, #5]
 8000d06:	e004      	b.n	8000d12 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000d08:	23ae      	movs	r3, #174	; 0xae
 8000d0a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <ssd1306_SetDisplayOn+0x38>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fdd7 	bl	80008c8 <ssd1306_WriteCommand>
}
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000588 	.word	0x20000588

08000d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <HAL_Init+0x28>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a07      	ldr	r2, [pc, #28]	; (8000d50 <HAL_Init+0x28>)
 8000d32:	f043 0310 	orr.w	r3, r3, #16
 8000d36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d38:	2003      	movs	r0, #3
 8000d3a:	f000 f92b 	bl	8000f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3e:	200f      	movs	r0, #15
 8000d40:	f000 f808 	bl	8000d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d44:	f7ff fc38 	bl	80005b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40022000 	.word	0x40022000

08000d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <HAL_InitTick+0x54>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_InitTick+0x58>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f935 	bl	8000fe2 <HAL_SYSTICK_Config>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00e      	b.n	8000da0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b0f      	cmp	r3, #15
 8000d86:	d80a      	bhi.n	8000d9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f000 f90b 	bl	8000faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d94:	4a06      	ldr	r2, [pc, #24]	; (8000db0 <HAL_InitTick+0x5c>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e000      	b.n	8000da0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000000 	.word	0x20000000
 8000dac:	20000010 	.word	0x20000010
 8000db0:	2000000c 	.word	0x2000000c

08000db4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <HAL_IncTick+0x1c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <HAL_IncTick+0x20>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	4a03      	ldr	r2, [pc, #12]	; (8000dd4 <HAL_IncTick+0x20>)
 8000dc6:	6013      	str	r3, [r2, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	20000010 	.word	0x20000010
 8000dd4:	20000590 	.word	0x20000590

08000dd8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b02      	ldr	r3, [pc, #8]	; (8000de8 <HAL_GetTick+0x10>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr
 8000de8:	20000590 	.word	0x20000590

08000dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df4:	f7ff fff0 	bl	8000dd8 <HAL_GetTick>
 8000df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e04:	d005      	beq.n	8000e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_Delay+0x44>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4413      	add	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e12:	bf00      	nop
 8000e14:	f7ff ffe0 	bl	8000dd8 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d8f7      	bhi.n	8000e14 <HAL_Delay+0x28>
  {
  }
}
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000010 	.word	0x20000010

08000e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e66:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	60d3      	str	r3, [r2, #12]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <__NVIC_GetPriorityGrouping+0x18>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0307 	and.w	r3, r3, #7
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db0a      	blt.n	8000ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	490c      	ldr	r1, [pc, #48]	; (8000ee4 <__NVIC_SetPriority+0x4c>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	0112      	lsls	r2, r2, #4
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	440b      	add	r3, r1
 8000ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec0:	e00a      	b.n	8000ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4908      	ldr	r1, [pc, #32]	; (8000ee8 <__NVIC_SetPriority+0x50>)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	0112      	lsls	r2, r2, #4
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	761a      	strb	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000e100 	.word	0xe000e100
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f1c3 0307 	rsb	r3, r3, #7
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2304      	movcs	r3, #4
 8000f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3304      	adds	r3, #4
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d902      	bls.n	8000f1c <NVIC_EncodePriority+0x30>
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3b03      	subs	r3, #3
 8000f1a:	e000      	b.n	8000f1e <NVIC_EncodePriority+0x32>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43d9      	mvns	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	4313      	orrs	r3, r2
         );
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	; 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr

08000f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f60:	d301      	bcc.n	8000f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f62:	2301      	movs	r3, #1
 8000f64:	e00f      	b.n	8000f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f66:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <SysTick_Config+0x40>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6e:	210f      	movs	r1, #15
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295
 8000f74:	f7ff ff90 	bl	8000e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <SysTick_Config+0x40>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7e:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <SysTick_Config+0x40>)
 8000f80:	2207      	movs	r2, #7
 8000f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	e000e010 	.word	0xe000e010

08000f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ff49 	bl	8000e34 <__NVIC_SetPriorityGrouping>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b086      	sub	sp, #24
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
 8000fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fbc:	f7ff ff5e 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8000fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	6978      	ldr	r0, [r7, #20]
 8000fc8:	f7ff ff90 	bl	8000eec <NVIC_EncodePriority>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff5f 	bl	8000e98 <__NVIC_SetPriority>
}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ffb0 	bl	8000f50 <SysTick_Config>
 8000ff0:	4603      	mov	r3, r0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b08b      	sub	sp, #44	; 0x2c
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800100e:	e169      	b.n	80012e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001010:	2201      	movs	r2, #1
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	69fa      	ldr	r2, [r7, #28]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	429a      	cmp	r2, r3
 800102a:	f040 8158 	bne.w	80012de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	4a9a      	ldr	r2, [pc, #616]	; (800129c <HAL_GPIO_Init+0x2a0>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d05e      	beq.n	80010f6 <HAL_GPIO_Init+0xfa>
 8001038:	4a98      	ldr	r2, [pc, #608]	; (800129c <HAL_GPIO_Init+0x2a0>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d875      	bhi.n	800112a <HAL_GPIO_Init+0x12e>
 800103e:	4a98      	ldr	r2, [pc, #608]	; (80012a0 <HAL_GPIO_Init+0x2a4>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d058      	beq.n	80010f6 <HAL_GPIO_Init+0xfa>
 8001044:	4a96      	ldr	r2, [pc, #600]	; (80012a0 <HAL_GPIO_Init+0x2a4>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d86f      	bhi.n	800112a <HAL_GPIO_Init+0x12e>
 800104a:	4a96      	ldr	r2, [pc, #600]	; (80012a4 <HAL_GPIO_Init+0x2a8>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d052      	beq.n	80010f6 <HAL_GPIO_Init+0xfa>
 8001050:	4a94      	ldr	r2, [pc, #592]	; (80012a4 <HAL_GPIO_Init+0x2a8>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d869      	bhi.n	800112a <HAL_GPIO_Init+0x12e>
 8001056:	4a94      	ldr	r2, [pc, #592]	; (80012a8 <HAL_GPIO_Init+0x2ac>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d04c      	beq.n	80010f6 <HAL_GPIO_Init+0xfa>
 800105c:	4a92      	ldr	r2, [pc, #584]	; (80012a8 <HAL_GPIO_Init+0x2ac>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d863      	bhi.n	800112a <HAL_GPIO_Init+0x12e>
 8001062:	4a92      	ldr	r2, [pc, #584]	; (80012ac <HAL_GPIO_Init+0x2b0>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d046      	beq.n	80010f6 <HAL_GPIO_Init+0xfa>
 8001068:	4a90      	ldr	r2, [pc, #576]	; (80012ac <HAL_GPIO_Init+0x2b0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d85d      	bhi.n	800112a <HAL_GPIO_Init+0x12e>
 800106e:	2b12      	cmp	r3, #18
 8001070:	d82a      	bhi.n	80010c8 <HAL_GPIO_Init+0xcc>
 8001072:	2b12      	cmp	r3, #18
 8001074:	d859      	bhi.n	800112a <HAL_GPIO_Init+0x12e>
 8001076:	a201      	add	r2, pc, #4	; (adr r2, 800107c <HAL_GPIO_Init+0x80>)
 8001078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107c:	080010f7 	.word	0x080010f7
 8001080:	080010d1 	.word	0x080010d1
 8001084:	080010e3 	.word	0x080010e3
 8001088:	08001125 	.word	0x08001125
 800108c:	0800112b 	.word	0x0800112b
 8001090:	0800112b 	.word	0x0800112b
 8001094:	0800112b 	.word	0x0800112b
 8001098:	0800112b 	.word	0x0800112b
 800109c:	0800112b 	.word	0x0800112b
 80010a0:	0800112b 	.word	0x0800112b
 80010a4:	0800112b 	.word	0x0800112b
 80010a8:	0800112b 	.word	0x0800112b
 80010ac:	0800112b 	.word	0x0800112b
 80010b0:	0800112b 	.word	0x0800112b
 80010b4:	0800112b 	.word	0x0800112b
 80010b8:	0800112b 	.word	0x0800112b
 80010bc:	0800112b 	.word	0x0800112b
 80010c0:	080010d9 	.word	0x080010d9
 80010c4:	080010ed 	.word	0x080010ed
 80010c8:	4a79      	ldr	r2, [pc, #484]	; (80012b0 <HAL_GPIO_Init+0x2b4>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d013      	beq.n	80010f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010ce:	e02c      	b.n	800112a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	623b      	str	r3, [r7, #32]
          break;
 80010d6:	e029      	b.n	800112c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	3304      	adds	r3, #4
 80010de:	623b      	str	r3, [r7, #32]
          break;
 80010e0:	e024      	b.n	800112c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	3308      	adds	r3, #8
 80010e8:	623b      	str	r3, [r7, #32]
          break;
 80010ea:	e01f      	b.n	800112c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	330c      	adds	r3, #12
 80010f2:	623b      	str	r3, [r7, #32]
          break;
 80010f4:	e01a      	b.n	800112c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d102      	bne.n	8001104 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010fe:	2304      	movs	r3, #4
 8001100:	623b      	str	r3, [r7, #32]
          break;
 8001102:	e013      	b.n	800112c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d105      	bne.n	8001118 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800110c:	2308      	movs	r3, #8
 800110e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69fa      	ldr	r2, [r7, #28]
 8001114:	611a      	str	r2, [r3, #16]
          break;
 8001116:	e009      	b.n	800112c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001118:	2308      	movs	r3, #8
 800111a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69fa      	ldr	r2, [r7, #28]
 8001120:	615a      	str	r2, [r3, #20]
          break;
 8001122:	e003      	b.n	800112c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001124:	2300      	movs	r3, #0
 8001126:	623b      	str	r3, [r7, #32]
          break;
 8001128:	e000      	b.n	800112c <HAL_GPIO_Init+0x130>
          break;
 800112a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	2bff      	cmp	r3, #255	; 0xff
 8001130:	d801      	bhi.n	8001136 <HAL_GPIO_Init+0x13a>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	e001      	b.n	800113a <HAL_GPIO_Init+0x13e>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3304      	adds	r3, #4
 800113a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	2bff      	cmp	r3, #255	; 0xff
 8001140:	d802      	bhi.n	8001148 <HAL_GPIO_Init+0x14c>
 8001142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	e002      	b.n	800114e <HAL_GPIO_Init+0x152>
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	3b08      	subs	r3, #8
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	210f      	movs	r1, #15
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	401a      	ands	r2, r3
 8001160:	6a39      	ldr	r1, [r7, #32]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	fa01 f303 	lsl.w	r3, r1, r3
 8001168:	431a      	orrs	r2, r3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 80b1 	beq.w	80012de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800117c:	4b4d      	ldr	r3, [pc, #308]	; (80012b4 <HAL_GPIO_Init+0x2b8>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a4c      	ldr	r2, [pc, #304]	; (80012b4 <HAL_GPIO_Init+0x2b8>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b4a      	ldr	r3, [pc, #296]	; (80012b4 <HAL_GPIO_Init+0x2b8>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001194:	4a48      	ldr	r2, [pc, #288]	; (80012b8 <HAL_GPIO_Init+0x2bc>)
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	3302      	adds	r3, #2
 800119c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	220f      	movs	r2, #15
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	4013      	ands	r3, r2
 80011b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a40      	ldr	r2, [pc, #256]	; (80012bc <HAL_GPIO_Init+0x2c0>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d013      	beq.n	80011e8 <HAL_GPIO_Init+0x1ec>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a3f      	ldr	r2, [pc, #252]	; (80012c0 <HAL_GPIO_Init+0x2c4>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d00d      	beq.n	80011e4 <HAL_GPIO_Init+0x1e8>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a3e      	ldr	r2, [pc, #248]	; (80012c4 <HAL_GPIO_Init+0x2c8>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d007      	beq.n	80011e0 <HAL_GPIO_Init+0x1e4>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a3d      	ldr	r2, [pc, #244]	; (80012c8 <HAL_GPIO_Init+0x2cc>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d101      	bne.n	80011dc <HAL_GPIO_Init+0x1e0>
 80011d8:	2303      	movs	r3, #3
 80011da:	e006      	b.n	80011ea <HAL_GPIO_Init+0x1ee>
 80011dc:	2304      	movs	r3, #4
 80011de:	e004      	b.n	80011ea <HAL_GPIO_Init+0x1ee>
 80011e0:	2302      	movs	r3, #2
 80011e2:	e002      	b.n	80011ea <HAL_GPIO_Init+0x1ee>
 80011e4:	2301      	movs	r3, #1
 80011e6:	e000      	b.n	80011ea <HAL_GPIO_Init+0x1ee>
 80011e8:	2300      	movs	r3, #0
 80011ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ec:	f002 0203 	and.w	r2, r2, #3
 80011f0:	0092      	lsls	r2, r2, #2
 80011f2:	4093      	lsls	r3, r2
 80011f4:	68fa      	ldr	r2, [r7, #12]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011fa:	492f      	ldr	r1, [pc, #188]	; (80012b8 <HAL_GPIO_Init+0x2bc>)
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	089b      	lsrs	r3, r3, #2
 8001200:	3302      	adds	r3, #2
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d006      	beq.n	8001222 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001214:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	492c      	ldr	r1, [pc, #176]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	608b      	str	r3, [r1, #8]
 8001220:	e006      	b.n	8001230 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001222:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	43db      	mvns	r3, r3
 800122a:	4928      	ldr	r1, [pc, #160]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 800122c:	4013      	ands	r3, r2
 800122e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d006      	beq.n	800124a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800123c:	4b23      	ldr	r3, [pc, #140]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 800123e:	68da      	ldr	r2, [r3, #12]
 8001240:	4922      	ldr	r1, [pc, #136]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	4313      	orrs	r3, r2
 8001246:	60cb      	str	r3, [r1, #12]
 8001248:	e006      	b.n	8001258 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 800124c:	68da      	ldr	r2, [r3, #12]
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	43db      	mvns	r3, r3
 8001252:	491e      	ldr	r1, [pc, #120]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 8001254:	4013      	ands	r3, r2
 8001256:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d006      	beq.n	8001272 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	4918      	ldr	r1, [pc, #96]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	604b      	str	r3, [r1, #4]
 8001270:	e006      	b.n	8001280 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001272:	4b16      	ldr	r3, [pc, #88]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	43db      	mvns	r3, r3
 800127a:	4914      	ldr	r1, [pc, #80]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 800127c:	4013      	ands	r3, r2
 800127e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d021      	beq.n	80012d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	490e      	ldr	r1, [pc, #56]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	600b      	str	r3, [r1, #0]
 8001298:	e021      	b.n	80012de <HAL_GPIO_Init+0x2e2>
 800129a:	bf00      	nop
 800129c:	10320000 	.word	0x10320000
 80012a0:	10310000 	.word	0x10310000
 80012a4:	10220000 	.word	0x10220000
 80012a8:	10210000 	.word	0x10210000
 80012ac:	10120000 	.word	0x10120000
 80012b0:	10110000 	.word	0x10110000
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40010000 	.word	0x40010000
 80012bc:	40010800 	.word	0x40010800
 80012c0:	40010c00 	.word	0x40010c00
 80012c4:	40011000 	.word	0x40011000
 80012c8:	40011400 	.word	0x40011400
 80012cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <HAL_GPIO_Init+0x304>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	4909      	ldr	r1, [pc, #36]	; (8001300 <HAL_GPIO_Init+0x304>)
 80012da:	4013      	ands	r3, r2
 80012dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	3301      	adds	r3, #1
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	fa22 f303 	lsr.w	r3, r2, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f47f ae8e 	bne.w	8001010 <HAL_GPIO_Init+0x14>
  }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	372c      	adds	r7, #44	; 0x2c
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr
 8001300:	40010400 	.word	0x40010400

08001304 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e12b      	b.n	800156e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d106      	bne.n	8001330 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff f976 	bl	800061c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2224      	movs	r2, #36	; 0x24
 8001334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f022 0201 	bic.w	r2, r2, #1
 8001346:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001356:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001366:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001368:	f001 fbf0 	bl	8002b4c <HAL_RCC_GetPCLK1Freq>
 800136c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	4a81      	ldr	r2, [pc, #516]	; (8001578 <HAL_I2C_Init+0x274>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d807      	bhi.n	8001388 <HAL_I2C_Init+0x84>
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4a80      	ldr	r2, [pc, #512]	; (800157c <HAL_I2C_Init+0x278>)
 800137c:	4293      	cmp	r3, r2
 800137e:	bf94      	ite	ls
 8001380:	2301      	movls	r3, #1
 8001382:	2300      	movhi	r3, #0
 8001384:	b2db      	uxtb	r3, r3
 8001386:	e006      	b.n	8001396 <HAL_I2C_Init+0x92>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4a7d      	ldr	r2, [pc, #500]	; (8001580 <HAL_I2C_Init+0x27c>)
 800138c:	4293      	cmp	r3, r2
 800138e:	bf94      	ite	ls
 8001390:	2301      	movls	r3, #1
 8001392:	2300      	movhi	r3, #0
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e0e7      	b.n	800156e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4a78      	ldr	r2, [pc, #480]	; (8001584 <HAL_I2C_Init+0x280>)
 80013a2:	fba2 2303 	umull	r2, r3, r2, r3
 80013a6:	0c9b      	lsrs	r3, r3, #18
 80013a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	68ba      	ldr	r2, [r7, #8]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	4a6a      	ldr	r2, [pc, #424]	; (8001578 <HAL_I2C_Init+0x274>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d802      	bhi.n	80013d8 <HAL_I2C_Init+0xd4>
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	3301      	adds	r3, #1
 80013d6:	e009      	b.n	80013ec <HAL_I2C_Init+0xe8>
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013de:	fb02 f303 	mul.w	r3, r2, r3
 80013e2:	4a69      	ldr	r2, [pc, #420]	; (8001588 <HAL_I2C_Init+0x284>)
 80013e4:	fba2 2303 	umull	r2, r3, r2, r3
 80013e8:	099b      	lsrs	r3, r3, #6
 80013ea:	3301      	adds	r3, #1
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	6812      	ldr	r2, [r2, #0]
 80013f0:	430b      	orrs	r3, r1
 80013f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	495c      	ldr	r1, [pc, #368]	; (8001578 <HAL_I2C_Init+0x274>)
 8001408:	428b      	cmp	r3, r1
 800140a:	d819      	bhi.n	8001440 <HAL_I2C_Init+0x13c>
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	1e59      	subs	r1, r3, #1
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	fbb1 f3f3 	udiv	r3, r1, r3
 800141a:	1c59      	adds	r1, r3, #1
 800141c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001420:	400b      	ands	r3, r1
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00a      	beq.n	800143c <HAL_I2C_Init+0x138>
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	1e59      	subs	r1, r3, #1
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fbb1 f3f3 	udiv	r3, r1, r3
 8001434:	3301      	adds	r3, #1
 8001436:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800143a:	e051      	b.n	80014e0 <HAL_I2C_Init+0x1dc>
 800143c:	2304      	movs	r3, #4
 800143e:	e04f      	b.n	80014e0 <HAL_I2C_Init+0x1dc>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d111      	bne.n	800146c <HAL_I2C_Init+0x168>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	1e58      	subs	r0, r3, #1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6859      	ldr	r1, [r3, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	440b      	add	r3, r1
 8001456:	fbb0 f3f3 	udiv	r3, r0, r3
 800145a:	3301      	adds	r3, #1
 800145c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001460:	2b00      	cmp	r3, #0
 8001462:	bf0c      	ite	eq
 8001464:	2301      	moveq	r3, #1
 8001466:	2300      	movne	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	e012      	b.n	8001492 <HAL_I2C_Init+0x18e>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	1e58      	subs	r0, r3, #1
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6859      	ldr	r1, [r3, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	0099      	lsls	r1, r3, #2
 800147c:	440b      	add	r3, r1
 800147e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001482:	3301      	adds	r3, #1
 8001484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001488:	2b00      	cmp	r3, #0
 800148a:	bf0c      	ite	eq
 800148c:	2301      	moveq	r3, #1
 800148e:	2300      	movne	r3, #0
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_I2C_Init+0x196>
 8001496:	2301      	movs	r3, #1
 8001498:	e022      	b.n	80014e0 <HAL_I2C_Init+0x1dc>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10e      	bne.n	80014c0 <HAL_I2C_Init+0x1bc>
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	1e58      	subs	r0, r3, #1
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6859      	ldr	r1, [r3, #4]
 80014aa:	460b      	mov	r3, r1
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	440b      	add	r3, r1
 80014b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80014b4:	3301      	adds	r3, #1
 80014b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014be:	e00f      	b.n	80014e0 <HAL_I2C_Init+0x1dc>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	1e58      	subs	r0, r3, #1
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6859      	ldr	r1, [r3, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	440b      	add	r3, r1
 80014ce:	0099      	lsls	r1, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014d6:	3301      	adds	r3, #1
 80014d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	6809      	ldr	r1, [r1, #0]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69da      	ldr	r2, [r3, #28]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800150e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6911      	ldr	r1, [r2, #16]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	68d2      	ldr	r2, [r2, #12]
 800151a:	4311      	orrs	r1, r2
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	430b      	orrs	r3, r1
 8001522:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695a      	ldr	r2, [r3, #20]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f042 0201 	orr.w	r2, r2, #1
 800154e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2220      	movs	r2, #32
 800155a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	000186a0 	.word	0x000186a0
 800157c:	001e847f 	.word	0x001e847f
 8001580:	003d08ff 	.word	0x003d08ff
 8001584:	431bde83 	.word	0x431bde83
 8001588:	10624dd3 	.word	0x10624dd3

0800158c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af02      	add	r7, sp, #8
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	4608      	mov	r0, r1
 8001596:	4611      	mov	r1, r2
 8001598:	461a      	mov	r2, r3
 800159a:	4603      	mov	r3, r0
 800159c:	817b      	strh	r3, [r7, #10]
 800159e:	460b      	mov	r3, r1
 80015a0:	813b      	strh	r3, [r7, #8]
 80015a2:	4613      	mov	r3, r2
 80015a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015a6:	f7ff fc17 	bl	8000dd8 <HAL_GetTick>
 80015aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b20      	cmp	r3, #32
 80015b6:	f040 80d9 	bne.w	800176c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2319      	movs	r3, #25
 80015c0:	2201      	movs	r2, #1
 80015c2:	496d      	ldr	r1, [pc, #436]	; (8001778 <HAL_I2C_Mem_Write+0x1ec>)
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f000 fcc1 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80015d0:	2302      	movs	r3, #2
 80015d2:	e0cc      	b.n	800176e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d101      	bne.n	80015e2 <HAL_I2C_Mem_Write+0x56>
 80015de:	2302      	movs	r3, #2
 80015e0:	e0c5      	b.n	800176e <HAL_I2C_Mem_Write+0x1e2>
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d007      	beq.n	8001608 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f042 0201 	orr.w	r2, r2, #1
 8001606:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001616:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2221      	movs	r2, #33	; 0x21
 800161c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2240      	movs	r2, #64	; 0x40
 8001624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2200      	movs	r2, #0
 800162c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6a3a      	ldr	r2, [r7, #32]
 8001632:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001638:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800163e:	b29a      	uxth	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4a4d      	ldr	r2, [pc, #308]	; (800177c <HAL_I2C_Mem_Write+0x1f0>)
 8001648:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800164a:	88f8      	ldrh	r0, [r7, #6]
 800164c:	893a      	ldrh	r2, [r7, #8]
 800164e:	8979      	ldrh	r1, [r7, #10]
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	4603      	mov	r3, r0
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f000 faf8 	bl	8001c50 <I2C_RequestMemoryWrite>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d052      	beq.n	800170c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e081      	b.n	800176e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	f000 fd86 	bl	8002180 <I2C_WaitOnTXEFlagUntilTimeout>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00d      	beq.n	8001696 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	2b04      	cmp	r3, #4
 8001680:	d107      	bne.n	8001692 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001690:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e06b      	b.n	800176e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169a:	781a      	ldrb	r2, [r3, #0]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b0:	3b01      	subs	r3, #1
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016bc:	b29b      	uxth	r3, r3
 80016be:	3b01      	subs	r3, #1
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d11b      	bne.n	800170c <HAL_I2C_Mem_Write+0x180>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d017      	beq.n	800170c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	781a      	ldrb	r2, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f6:	3b01      	subs	r3, #1
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001702:	b29b      	uxth	r3, r3
 8001704:	3b01      	subs	r3, #1
 8001706:	b29a      	uxth	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1aa      	bne.n	800166a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f000 fd79 	bl	8002210 <I2C_WaitOnBTFFlagUntilTimeout>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00d      	beq.n	8001740 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	2b04      	cmp	r3, #4
 800172a:	d107      	bne.n	800173c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800173a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e016      	b.n	800176e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800174e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2220      	movs	r2, #32
 8001754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001768:	2300      	movs	r3, #0
 800176a:	e000      	b.n	800176e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800176c:	2302      	movs	r3, #2
  }
}
 800176e:	4618      	mov	r0, r3
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	00100002 	.word	0x00100002
 800177c:	ffff0000 	.word	0xffff0000

08001780 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08c      	sub	sp, #48	; 0x30
 8001784:	af02      	add	r7, sp, #8
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	4608      	mov	r0, r1
 800178a:	4611      	mov	r1, r2
 800178c:	461a      	mov	r2, r3
 800178e:	4603      	mov	r3, r0
 8001790:	817b      	strh	r3, [r7, #10]
 8001792:	460b      	mov	r3, r1
 8001794:	813b      	strh	r3, [r7, #8]
 8001796:	4613      	mov	r3, r2
 8001798:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800179a:	2300      	movs	r3, #0
 800179c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800179e:	f7ff fb1b 	bl	8000dd8 <HAL_GetTick>
 80017a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b20      	cmp	r3, #32
 80017ae:	f040 8244 	bne.w	8001c3a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2319      	movs	r3, #25
 80017b8:	2201      	movs	r2, #1
 80017ba:	4982      	ldr	r1, [pc, #520]	; (80019c4 <HAL_I2C_Mem_Read+0x244>)
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f000 fbc5 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80017c8:	2302      	movs	r3, #2
 80017ca:	e237      	b.n	8001c3c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d101      	bne.n	80017da <HAL_I2C_Mem_Read+0x5a>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e230      	b.n	8001c3c <HAL_I2C_Mem_Read+0x4bc>
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d007      	beq.n	8001800 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0201 	orr.w	r2, r2, #1
 80017fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800180e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2222      	movs	r2, #34	; 0x22
 8001814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2240      	movs	r2, #64	; 0x40
 800181c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800182a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001830:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001836:	b29a      	uxth	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4a62      	ldr	r2, [pc, #392]	; (80019c8 <HAL_I2C_Mem_Read+0x248>)
 8001840:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001842:	88f8      	ldrh	r0, [r7, #6]
 8001844:	893a      	ldrh	r2, [r7, #8]
 8001846:	8979      	ldrh	r1, [r7, #10]
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	4603      	mov	r3, r0
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f000 fa92 	bl	8001d7c <I2C_RequestMemoryRead>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e1ec      	b.n	8001c3c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001866:	2b00      	cmp	r3, #0
 8001868:	d113      	bne.n	8001892 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	61fb      	str	r3, [r7, #28]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	e1c0      	b.n	8001c14 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001896:	2b01      	cmp	r3, #1
 8001898:	d11e      	bne.n	80018d8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80018aa:	b672      	cpsid	i
}
 80018ac:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ae:	2300      	movs	r3, #0
 80018b0:	61bb      	str	r3, [r7, #24]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	61bb      	str	r3, [r7, #24]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	61bb      	str	r3, [r7, #24]
 80018c2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80018d4:	b662      	cpsie	i
}
 80018d6:	e035      	b.n	8001944 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d11e      	bne.n	800191e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80018f0:	b672      	cpsid	i
}
 80018f2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001918:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800191a:	b662      	cpsie	i
}
 800191c:	e012      	b.n	8001944 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800192c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001944:	e166      	b.n	8001c14 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800194a:	2b03      	cmp	r3, #3
 800194c:	f200 811f 	bhi.w	8001b8e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001954:	2b01      	cmp	r3, #1
 8001956:	d123      	bne.n	80019a0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800195a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f000 fc9f 	bl	80022a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e167      	b.n	8001c3c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	691a      	ldr	r2, [r3, #16]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001988:	3b01      	subs	r3, #1
 800198a:	b29a      	uxth	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001994:	b29b      	uxth	r3, r3
 8001996:	3b01      	subs	r3, #1
 8001998:	b29a      	uxth	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800199e:	e139      	b.n	8001c14 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d152      	bne.n	8001a4e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ae:	2200      	movs	r2, #0
 80019b0:	4906      	ldr	r1, [pc, #24]	; (80019cc <HAL_I2C_Mem_Read+0x24c>)
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f000 faca 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d008      	beq.n	80019d0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e13c      	b.n	8001c3c <HAL_I2C_Mem_Read+0x4bc>
 80019c2:	bf00      	nop
 80019c4:	00100002 	.word	0x00100002
 80019c8:	ffff0000 	.word	0xffff0000
 80019cc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80019d0:	b672      	cpsid	i
}
 80019d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	691a      	ldr	r2, [r3, #16]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	1c5a      	adds	r2, r3, #1
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a00:	3b01      	subs	r3, #1
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001a16:	b662      	cpsie	i
}
 8001a18:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	691a      	ldr	r2, [r3, #16]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	1c5a      	adds	r2, r3, #1
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a36:	3b01      	subs	r3, #1
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	3b01      	subs	r3, #1
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a4c:	e0e2      	b.n	8001c14 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a54:	2200      	movs	r2, #0
 8001a56:	497b      	ldr	r1, [pc, #492]	; (8001c44 <HAL_I2C_Mem_Read+0x4c4>)
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f000 fa77 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0e9      	b.n	8001c3c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a78:	b672      	cpsid	i
}
 8001a7a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	691a      	ldr	r2, [r3, #16]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001aae:	4b66      	ldr	r3, [pc, #408]	; (8001c48 <HAL_I2C_Mem_Read+0x4c8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	08db      	lsrs	r3, r3, #3
 8001ab4:	4a65      	ldr	r2, [pc, #404]	; (8001c4c <HAL_I2C_Mem_Read+0x4cc>)
 8001ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aba:	0a1a      	lsrs	r2, r3, #8
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	00da      	lsls	r2, r3, #3
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d118      	bne.n	8001b06 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2220      	movs	r2, #32
 8001ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f043 0220 	orr.w	r2, r3, #32
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001af6:	b662      	cpsie	i
}
 8001af8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e09a      	b.n	8001c3c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d1d9      	bne.n	8001ac8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	691a      	ldr	r2, [r3, #16]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b40:	3b01      	subs	r3, #1
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001b56:	b662      	cpsie	i
}
 8001b58:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b76:	3b01      	subs	r3, #1
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	3b01      	subs	r3, #1
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b8c:	e042      	b.n	8001c14 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f000 fb84 	bl	80022a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e04c      	b.n	8001c3c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d118      	bne.n	8001c14 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	691a      	ldr	r2, [r3, #16]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	1c5a      	adds	r2, r3, #1
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f47f ae94 	bne.w	8001946 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2220      	movs	r2, #32
 8001c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	e000      	b.n	8001c3c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001c3a:	2302      	movs	r3, #2
  }
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3728      	adds	r7, #40	; 0x28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	00010004 	.word	0x00010004
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	14f8b589 	.word	0x14f8b589

08001c50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	4608      	mov	r0, r1
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4603      	mov	r3, r0
 8001c60:	817b      	strh	r3, [r7, #10]
 8001c62:	460b      	mov	r3, r1
 8001c64:	813b      	strh	r3, [r7, #8]
 8001c66:	4613      	mov	r3, r2
 8001c68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 f960 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00d      	beq.n	8001cae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ca0:	d103      	bne.n	8001caa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e05f      	b.n	8001d6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cae:	897b      	ldrh	r3, [r7, #10]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	6a3a      	ldr	r2, [r7, #32]
 8001cc2:	492d      	ldr	r1, [pc, #180]	; (8001d78 <I2C_RequestMemoryWrite+0x128>)
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f000 f9bb 	bl	8002040 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e04c      	b.n	8001d6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cec:	6a39      	ldr	r1, [r7, #32]
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f000 fa46 	bl	8002180 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00d      	beq.n	8001d16 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d107      	bne.n	8001d12 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e02b      	b.n	8001d6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d105      	bne.n	8001d28 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d1c:	893b      	ldrh	r3, [r7, #8]
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	611a      	str	r2, [r3, #16]
 8001d26:	e021      	b.n	8001d6c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001d28:	893b      	ldrh	r3, [r7, #8]
 8001d2a:	0a1b      	lsrs	r3, r3, #8
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d38:	6a39      	ldr	r1, [r7, #32]
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 fa20 	bl	8002180 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00d      	beq.n	8001d62 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d107      	bne.n	8001d5e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e005      	b.n	8001d6e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d62:	893b      	ldrh	r3, [r7, #8]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	00010002 	.word	0x00010002

08001d7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	4608      	mov	r0, r1
 8001d86:	4611      	mov	r1, r2
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	817b      	strh	r3, [r7, #10]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	813b      	strh	r3, [r7, #8]
 8001d92:	4613      	mov	r3, r2
 8001d94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001da4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001db4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f000 f8c2 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00d      	beq.n	8001dea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ddc:	d103      	bne.n	8001de6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001de4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e0aa      	b.n	8001f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dea:	897b      	ldrh	r3, [r7, #10]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	461a      	mov	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001df8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	6a3a      	ldr	r2, [r7, #32]
 8001dfe:	4952      	ldr	r1, [pc, #328]	; (8001f48 <I2C_RequestMemoryRead+0x1cc>)
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f000 f91d 	bl	8002040 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e097      	b.n	8001f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e28:	6a39      	ldr	r1, [r7, #32]
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f000 f9a8 	bl	8002180 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00d      	beq.n	8001e52 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d107      	bne.n	8001e4e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e076      	b.n	8001f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d105      	bne.n	8001e64 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e58:	893b      	ldrh	r3, [r7, #8]
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	611a      	str	r2, [r3, #16]
 8001e62:	e021      	b.n	8001ea8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e64:	893b      	ldrh	r3, [r7, #8]
 8001e66:	0a1b      	lsrs	r3, r3, #8
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e74:	6a39      	ldr	r1, [r7, #32]
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 f982 	bl	8002180 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00d      	beq.n	8001e9e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	d107      	bne.n	8001e9a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e050      	b.n	8001f40 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e9e:	893b      	ldrh	r3, [r7, #8]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eaa:	6a39      	ldr	r1, [r7, #32]
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 f967 	bl	8002180 <I2C_WaitOnTXEFlagUntilTimeout>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00d      	beq.n	8001ed4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d107      	bne.n	8001ed0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ece:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e035      	b.n	8001f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 f82b 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00d      	beq.n	8001f18 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f0a:	d103      	bne.n	8001f14 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e013      	b.n	8001f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001f18:	897b      	ldrh	r3, [r7, #10]
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	6a3a      	ldr	r2, [r7, #32]
 8001f2c:	4906      	ldr	r1, [pc, #24]	; (8001f48 <I2C_RequestMemoryRead+0x1cc>)
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 f886 	bl	8002040 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	00010002 	.word	0x00010002

08001f4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f5c:	e048      	b.n	8001ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f64:	d044      	beq.n	8001ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f66:	f7fe ff37 	bl	8000dd8 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d302      	bcc.n	8001f7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d139      	bne.n	8001ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	0c1b      	lsrs	r3, r3, #16
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d10d      	bne.n	8001fa2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	43da      	mvns	r2, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	4013      	ands	r3, r2
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	bf0c      	ite	eq
 8001f98:	2301      	moveq	r3, #1
 8001f9a:	2300      	movne	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	e00c      	b.n	8001fbc <I2C_WaitOnFlagUntilTimeout+0x70>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	43da      	mvns	r2, r3
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	4013      	ands	r3, r2
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	bf0c      	ite	eq
 8001fb4:	2301      	moveq	r3, #1
 8001fb6:	2300      	movne	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	461a      	mov	r2, r3
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d116      	bne.n	8001ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	f043 0220 	orr.w	r2, r3, #32
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e023      	b.n	8002038 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	0c1b      	lsrs	r3, r3, #16
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d10d      	bne.n	8002016 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	43da      	mvns	r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	4013      	ands	r3, r2
 8002006:	b29b      	uxth	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	bf0c      	ite	eq
 800200c:	2301      	moveq	r3, #1
 800200e:	2300      	movne	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	461a      	mov	r2, r3
 8002014:	e00c      	b.n	8002030 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	43da      	mvns	r2, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	4013      	ands	r3, r2
 8002022:	b29b      	uxth	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	bf0c      	ite	eq
 8002028:	2301      	moveq	r3, #1
 800202a:	2300      	movne	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	461a      	mov	r2, r3
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	429a      	cmp	r2, r3
 8002034:	d093      	beq.n	8001f5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800204e:	e071      	b.n	8002134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800205e:	d123      	bne.n	80020a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800206e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002078:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2220      	movs	r2, #32
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	f043 0204 	orr.w	r2, r3, #4
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e067      	b.n	8002178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ae:	d041      	beq.n	8002134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020b0:	f7fe fe92 	bl	8000dd8 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d302      	bcc.n	80020c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d136      	bne.n	8002134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	0c1b      	lsrs	r3, r3, #16
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d10c      	bne.n	80020ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	43da      	mvns	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	4013      	ands	r3, r2
 80020dc:	b29b      	uxth	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf14      	ite	ne
 80020e2:	2301      	movne	r3, #1
 80020e4:	2300      	moveq	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	e00b      	b.n	8002102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	43da      	mvns	r2, r3
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	4013      	ands	r3, r2
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	bf14      	ite	ne
 80020fc:	2301      	movne	r3, #1
 80020fe:	2300      	moveq	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d016      	beq.n	8002134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2220      	movs	r2, #32
 8002110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	f043 0220 	orr.w	r2, r3, #32
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e021      	b.n	8002178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	0c1b      	lsrs	r3, r3, #16
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b01      	cmp	r3, #1
 800213c:	d10c      	bne.n	8002158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	43da      	mvns	r2, r3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	4013      	ands	r3, r2
 800214a:	b29b      	uxth	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	bf14      	ite	ne
 8002150:	2301      	movne	r3, #1
 8002152:	2300      	moveq	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	e00b      	b.n	8002170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	43da      	mvns	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	4013      	ands	r3, r2
 8002164:	b29b      	uxth	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	bf14      	ite	ne
 800216a:	2301      	movne	r3, #1
 800216c:	2300      	moveq	r3, #0
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	f47f af6d 	bne.w	8002050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800218c:	e034      	b.n	80021f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 f8e3 	bl	800235a <I2C_IsAcknowledgeFailed>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e034      	b.n	8002208 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a4:	d028      	beq.n	80021f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021a6:	f7fe fe17 	bl	8000dd8 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d302      	bcc.n	80021bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d11d      	bne.n	80021f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c6:	2b80      	cmp	r3, #128	; 0x80
 80021c8:	d016      	beq.n	80021f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2220      	movs	r2, #32
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	f043 0220 	orr.w	r2, r3, #32
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e007      	b.n	8002208 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002202:	2b80      	cmp	r3, #128	; 0x80
 8002204:	d1c3      	bne.n	800218e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800221c:	e034      	b.n	8002288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 f89b 	bl	800235a <I2C_IsAcknowledgeFailed>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e034      	b.n	8002298 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002234:	d028      	beq.n	8002288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002236:	f7fe fdcf 	bl	8000dd8 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	429a      	cmp	r2, r3
 8002244:	d302      	bcc.n	800224c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d11d      	bne.n	8002288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	2b04      	cmp	r3, #4
 8002258:	d016      	beq.n	8002288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	f043 0220 	orr.w	r2, r3, #32
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e007      	b.n	8002298 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	2b04      	cmp	r3, #4
 8002294:	d1c3      	bne.n	800221e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022ac:	e049      	b.n	8002342 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	2b10      	cmp	r3, #16
 80022ba:	d119      	bne.n	80022f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f06f 0210 	mvn.w	r2, #16
 80022c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e030      	b.n	8002352 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f0:	f7fe fd72 	bl	8000dd8 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d302      	bcc.n	8002306 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d11d      	bne.n	8002342 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002310:	2b40      	cmp	r3, #64	; 0x40
 8002312:	d016      	beq.n	8002342 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2220      	movs	r2, #32
 800231e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f043 0220 	orr.w	r2, r3, #32
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e007      	b.n	8002352 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234c:	2b40      	cmp	r3, #64	; 0x40
 800234e:	d1ae      	bne.n	80022ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800236c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002370:	d11b      	bne.n	80023aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800237a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2220      	movs	r2, #32
 8002386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f043 0204 	orr.w	r2, r3, #4
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr
	...

080023b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e272      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 8087 	beq.w	80024e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023d8:	4b92      	ldr	r3, [pc, #584]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d00c      	beq.n	80023fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023e4:	4b8f      	ldr	r3, [pc, #572]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 030c 	and.w	r3, r3, #12
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d112      	bne.n	8002416 <HAL_RCC_OscConfig+0x5e>
 80023f0:	4b8c      	ldr	r3, [pc, #560]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023fc:	d10b      	bne.n	8002416 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023fe:	4b89      	ldr	r3, [pc, #548]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d06c      	beq.n	80024e4 <HAL_RCC_OscConfig+0x12c>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d168      	bne.n	80024e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e24c      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800241e:	d106      	bne.n	800242e <HAL_RCC_OscConfig+0x76>
 8002420:	4b80      	ldr	r3, [pc, #512]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a7f      	ldr	r2, [pc, #508]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	e02e      	b.n	800248c <HAL_RCC_OscConfig+0xd4>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10c      	bne.n	8002450 <HAL_RCC_OscConfig+0x98>
 8002436:	4b7b      	ldr	r3, [pc, #492]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a7a      	ldr	r2, [pc, #488]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 800243c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	4b78      	ldr	r3, [pc, #480]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a77      	ldr	r2, [pc, #476]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002448:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	e01d      	b.n	800248c <HAL_RCC_OscConfig+0xd4>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002458:	d10c      	bne.n	8002474 <HAL_RCC_OscConfig+0xbc>
 800245a:	4b72      	ldr	r3, [pc, #456]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a71      	ldr	r2, [pc, #452]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	4b6f      	ldr	r3, [pc, #444]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a6e      	ldr	r2, [pc, #440]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	e00b      	b.n	800248c <HAL_RCC_OscConfig+0xd4>
 8002474:	4b6b      	ldr	r3, [pc, #428]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a6a      	ldr	r2, [pc, #424]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 800247a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	4b68      	ldr	r3, [pc, #416]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a67      	ldr	r2, [pc, #412]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800248a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d013      	beq.n	80024bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002494:	f7fe fca0 	bl	8000dd8 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800249c:	f7fe fc9c 	bl	8000dd8 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b64      	cmp	r3, #100	; 0x64
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e200      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ae:	4b5d      	ldr	r3, [pc, #372]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0xe4>
 80024ba:	e014      	b.n	80024e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024bc:	f7fe fc8c 	bl	8000dd8 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c4:	f7fe fc88 	bl	8000dd8 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b64      	cmp	r3, #100	; 0x64
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e1ec      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d6:	4b53      	ldr	r3, [pc, #332]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0x10c>
 80024e2:	e000      	b.n	80024e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d063      	beq.n	80025ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024f2:	4b4c      	ldr	r3, [pc, #304]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00b      	beq.n	8002516 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024fe:	4b49      	ldr	r3, [pc, #292]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b08      	cmp	r3, #8
 8002508:	d11c      	bne.n	8002544 <HAL_RCC_OscConfig+0x18c>
 800250a:	4b46      	ldr	r3, [pc, #280]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d116      	bne.n	8002544 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002516:	4b43      	ldr	r3, [pc, #268]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d005      	beq.n	800252e <HAL_RCC_OscConfig+0x176>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d001      	beq.n	800252e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e1c0      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252e:	4b3d      	ldr	r3, [pc, #244]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4939      	ldr	r1, [pc, #228]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 800253e:	4313      	orrs	r3, r2
 8002540:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002542:	e03a      	b.n	80025ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d020      	beq.n	800258e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800254c:	4b36      	ldr	r3, [pc, #216]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 800254e:	2201      	movs	r2, #1
 8002550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002552:	f7fe fc41 	bl	8000dd8 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800255a:	f7fe fc3d 	bl	8000dd8 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e1a1      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256c:	4b2d      	ldr	r3, [pc, #180]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002578:	4b2a      	ldr	r3, [pc, #168]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4927      	ldr	r1, [pc, #156]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002588:	4313      	orrs	r3, r2
 800258a:	600b      	str	r3, [r1, #0]
 800258c:	e015      	b.n	80025ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800258e:	4b26      	ldr	r3, [pc, #152]	; (8002628 <HAL_RCC_OscConfig+0x270>)
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7fe fc20 	bl	8000dd8 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259c:	f7fe fc1c 	bl	8000dd8 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e180      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ae:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d03a      	beq.n	800263c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d019      	beq.n	8002602 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ce:	4b17      	ldr	r3, [pc, #92]	; (800262c <HAL_RCC_OscConfig+0x274>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d4:	f7fe fc00 	bl	8000dd8 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025dc:	f7fe fbfc 	bl	8000dd8 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e160      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ee:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025fa:	2001      	movs	r0, #1
 80025fc:	f000 face 	bl	8002b9c <RCC_Delay>
 8002600:	e01c      	b.n	800263c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002602:	4b0a      	ldr	r3, [pc, #40]	; (800262c <HAL_RCC_OscConfig+0x274>)
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002608:	f7fe fbe6 	bl	8000dd8 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800260e:	e00f      	b.n	8002630 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002610:	f7fe fbe2 	bl	8000dd8 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d908      	bls.n	8002630 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e146      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000
 8002628:	42420000 	.word	0x42420000
 800262c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002630:	4b92      	ldr	r3, [pc, #584]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1e9      	bne.n	8002610 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80a6 	beq.w	8002796 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264a:	2300      	movs	r3, #0
 800264c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800264e:	4b8b      	ldr	r3, [pc, #556]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10d      	bne.n	8002676 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265a:	4b88      	ldr	r3, [pc, #544]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	4a87      	ldr	r2, [pc, #540]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002664:	61d3      	str	r3, [r2, #28]
 8002666:	4b85      	ldr	r3, [pc, #532]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002672:	2301      	movs	r3, #1
 8002674:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002676:	4b82      	ldr	r3, [pc, #520]	; (8002880 <HAL_RCC_OscConfig+0x4c8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267e:	2b00      	cmp	r3, #0
 8002680:	d118      	bne.n	80026b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002682:	4b7f      	ldr	r3, [pc, #508]	; (8002880 <HAL_RCC_OscConfig+0x4c8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a7e      	ldr	r2, [pc, #504]	; (8002880 <HAL_RCC_OscConfig+0x4c8>)
 8002688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800268c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800268e:	f7fe fba3 	bl	8000dd8 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002696:	f7fe fb9f 	bl	8000dd8 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b64      	cmp	r3, #100	; 0x64
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e103      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a8:	4b75      	ldr	r3, [pc, #468]	; (8002880 <HAL_RCC_OscConfig+0x4c8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d106      	bne.n	80026ca <HAL_RCC_OscConfig+0x312>
 80026bc:	4b6f      	ldr	r3, [pc, #444]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	4a6e      	ldr	r2, [pc, #440]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	6213      	str	r3, [r2, #32]
 80026c8:	e02d      	b.n	8002726 <HAL_RCC_OscConfig+0x36e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10c      	bne.n	80026ec <HAL_RCC_OscConfig+0x334>
 80026d2:	4b6a      	ldr	r3, [pc, #424]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	4a69      	ldr	r2, [pc, #420]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	f023 0301 	bic.w	r3, r3, #1
 80026dc:	6213      	str	r3, [r2, #32]
 80026de:	4b67      	ldr	r3, [pc, #412]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	4a66      	ldr	r2, [pc, #408]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026e4:	f023 0304 	bic.w	r3, r3, #4
 80026e8:	6213      	str	r3, [r2, #32]
 80026ea:	e01c      	b.n	8002726 <HAL_RCC_OscConfig+0x36e>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	2b05      	cmp	r3, #5
 80026f2:	d10c      	bne.n	800270e <HAL_RCC_OscConfig+0x356>
 80026f4:	4b61      	ldr	r3, [pc, #388]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4a60      	ldr	r2, [pc, #384]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026fa:	f043 0304 	orr.w	r3, r3, #4
 80026fe:	6213      	str	r3, [r2, #32]
 8002700:	4b5e      	ldr	r3, [pc, #376]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	4a5d      	ldr	r2, [pc, #372]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	6213      	str	r3, [r2, #32]
 800270c:	e00b      	b.n	8002726 <HAL_RCC_OscConfig+0x36e>
 800270e:	4b5b      	ldr	r3, [pc, #364]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	4a5a      	ldr	r2, [pc, #360]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002714:	f023 0301 	bic.w	r3, r3, #1
 8002718:	6213      	str	r3, [r2, #32]
 800271a:	4b58      	ldr	r3, [pc, #352]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	4a57      	ldr	r2, [pc, #348]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002720:	f023 0304 	bic.w	r3, r3, #4
 8002724:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d015      	beq.n	800275a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272e:	f7fe fb53 	bl	8000dd8 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002734:	e00a      	b.n	800274c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002736:	f7fe fb4f 	bl	8000dd8 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	f241 3288 	movw	r2, #5000	; 0x1388
 8002744:	4293      	cmp	r3, r2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e0b1      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274c:	4b4b      	ldr	r3, [pc, #300]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0ee      	beq.n	8002736 <HAL_RCC_OscConfig+0x37e>
 8002758:	e014      	b.n	8002784 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275a:	f7fe fb3d 	bl	8000dd8 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002760:	e00a      	b.n	8002778 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002762:	f7fe fb39 	bl	8000dd8 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002770:	4293      	cmp	r3, r2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e09b      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002778:	4b40      	ldr	r3, [pc, #256]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1ee      	bne.n	8002762 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002784:	7dfb      	ldrb	r3, [r7, #23]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d105      	bne.n	8002796 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278a:	4b3c      	ldr	r3, [pc, #240]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	4a3b      	ldr	r2, [pc, #236]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002794:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 8087 	beq.w	80028ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027a0:	4b36      	ldr	r3, [pc, #216]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 030c 	and.w	r3, r3, #12
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d061      	beq.n	8002870 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d146      	bne.n	8002842 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b4:	4b33      	ldr	r3, [pc, #204]	; (8002884 <HAL_RCC_OscConfig+0x4cc>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ba:	f7fe fb0d 	bl	8000dd8 <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c2:	f7fe fb09 	bl	8000dd8 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e06d      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d4:	4b29      	ldr	r3, [pc, #164]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1f0      	bne.n	80027c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e8:	d108      	bne.n	80027fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027ea:	4b24      	ldr	r3, [pc, #144]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	4921      	ldr	r1, [pc, #132]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027fc:	4b1f      	ldr	r3, [pc, #124]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a19      	ldr	r1, [r3, #32]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	430b      	orrs	r3, r1
 800280e:	491b      	ldr	r1, [pc, #108]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002810:	4313      	orrs	r3, r2
 8002812:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002814:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <HAL_RCC_OscConfig+0x4cc>)
 8002816:	2201      	movs	r2, #1
 8002818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281a:	f7fe fadd 	bl	8000dd8 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002822:	f7fe fad9 	bl	8000dd8 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e03d      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0f0      	beq.n	8002822 <HAL_RCC_OscConfig+0x46a>
 8002840:	e035      	b.n	80028ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002842:	4b10      	ldr	r3, [pc, #64]	; (8002884 <HAL_RCC_OscConfig+0x4cc>)
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7fe fac6 	bl	8000dd8 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002850:	f7fe fac2 	bl	8000dd8 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e026      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0x498>
 800286e:	e01e      	b.n	80028ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d107      	bne.n	8002888 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e019      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
 800287c:	40021000 	.word	0x40021000
 8002880:	40007000 	.word	0x40007000
 8002884:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002888:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <HAL_RCC_OscConfig+0x500>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	429a      	cmp	r2, r3
 800289a:	d106      	bne.n	80028aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d001      	beq.n	80028ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40021000 	.word	0x40021000

080028bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0d0      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028d0:	4b6a      	ldr	r3, [pc, #424]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d910      	bls.n	8002900 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b67      	ldr	r3, [pc, #412]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 0207 	bic.w	r2, r3, #7
 80028e6:	4965      	ldr	r1, [pc, #404]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b63      	ldr	r3, [pc, #396]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0b8      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d020      	beq.n	800294e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002918:	4b59      	ldr	r3, [pc, #356]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4a58      	ldr	r2, [pc, #352]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002922:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002930:	4b53      	ldr	r3, [pc, #332]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4a52      	ldr	r2, [pc, #328]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002936:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800293a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800293c:	4b50      	ldr	r3, [pc, #320]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	494d      	ldr	r1, [pc, #308]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800294a:	4313      	orrs	r3, r2
 800294c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d040      	beq.n	80029dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d107      	bne.n	8002972 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002962:	4b47      	ldr	r3, [pc, #284]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d115      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e07f      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297a:	4b41      	ldr	r3, [pc, #260]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d109      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e073      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298a:	4b3d      	ldr	r3, [pc, #244]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e06b      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800299a:	4b39      	ldr	r3, [pc, #228]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f023 0203 	bic.w	r2, r3, #3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	4936      	ldr	r1, [pc, #216]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029ac:	f7fe fa14 	bl	8000dd8 <HAL_GetTick>
 80029b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b2:	e00a      	b.n	80029ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b4:	f7fe fa10 	bl	8000dd8 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e053      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	4b2d      	ldr	r3, [pc, #180]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 020c 	and.w	r2, r3, #12
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	429a      	cmp	r2, r3
 80029da:	d1eb      	bne.n	80029b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029dc:	4b27      	ldr	r3, [pc, #156]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d210      	bcs.n	8002a0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 0207 	bic.w	r2, r3, #7
 80029f2:	4922      	ldr	r1, [pc, #136]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e032      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a18:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4916      	ldr	r1, [pc, #88]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d009      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a36:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	490e      	ldr	r1, [pc, #56]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a4a:	f000 f821 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	490a      	ldr	r1, [pc, #40]	; (8002a84 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5c:	5ccb      	ldrb	r3, [r1, r3]
 8002a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a62:	4a09      	ldr	r2, [pc, #36]	; (8002a88 <HAL_RCC_ClockConfig+0x1cc>)
 8002a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <HAL_RCC_ClockConfig+0x1d0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe f972 	bl	8000d54 <HAL_InitTick>

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40022000 	.word	0x40022000
 8002a80:	40021000 	.word	0x40021000
 8002a84:	08003728 	.word	0x08003728
 8002a88:	20000000 	.word	0x20000000
 8002a8c:	2000000c 	.word	0x2000000c

08002a90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002aaa:	4b1e      	ldr	r3, [pc, #120]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x94>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d002      	beq.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x30>
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d003      	beq.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x36>
 8002abe:	e027      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ac0:	4b19      	ldr	r3, [pc, #100]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ac2:	613b      	str	r3, [r7, #16]
      break;
 8002ac4:	e027      	b.n	8002b16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	0c9b      	lsrs	r3, r3, #18
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	4a17      	ldr	r2, [pc, #92]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ad0:	5cd3      	ldrb	r3, [r2, r3]
 8002ad2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d010      	beq.n	8002b00 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ade:	4b11      	ldr	r3, [pc, #68]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	0c5b      	lsrs	r3, r3, #17
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	4a11      	ldr	r2, [pc, #68]	; (8002b30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002aea:	5cd3      	ldrb	r3, [r2, r3]
 8002aec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a0d      	ldr	r2, [pc, #52]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x98>)
 8002af2:	fb03 f202 	mul.w	r2, r3, r2
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	e004      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a0c      	ldr	r2, [pc, #48]	; (8002b34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b04:	fb02 f303 	mul.w	r3, r2, r3
 8002b08:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	613b      	str	r3, [r7, #16]
      break;
 8002b0e:	e002      	b.n	8002b16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b10:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b12:	613b      	str	r3, [r7, #16]
      break;
 8002b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b16:	693b      	ldr	r3, [r7, #16]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	371c      	adds	r7, #28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40021000 	.word	0x40021000
 8002b28:	007a1200 	.word	0x007a1200
 8002b2c:	08003eac 	.word	0x08003eac
 8002b30:	08003ebc 	.word	0x08003ebc
 8002b34:	003d0900 	.word	0x003d0900

08002b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b3c:	4b02      	ldr	r3, [pc, #8]	; (8002b48 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr
 8002b48:	20000000 	.word	0x20000000

08002b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b50:	f7ff fff2 	bl	8002b38 <HAL_RCC_GetHCLKFreq>
 8002b54:	4602      	mov	r2, r0
 8002b56:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	0a1b      	lsrs	r3, r3, #8
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	4903      	ldr	r1, [pc, #12]	; (8002b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b62:	5ccb      	ldrb	r3, [r1, r3]
 8002b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	08003738 	.word	0x08003738

08002b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b78:	f7ff ffde 	bl	8002b38 <HAL_RCC_GetHCLKFreq>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	0adb      	lsrs	r3, r3, #11
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	4903      	ldr	r1, [pc, #12]	; (8002b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b8a:	5ccb      	ldrb	r3, [r1, r3]
 8002b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40021000 	.word	0x40021000
 8002b98:	08003738 	.word	0x08003738

08002b9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ba4:	4b0a      	ldr	r3, [pc, #40]	; (8002bd0 <RCC_Delay+0x34>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a0a      	ldr	r2, [pc, #40]	; (8002bd4 <RCC_Delay+0x38>)
 8002baa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bae:	0a5b      	lsrs	r3, r3, #9
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	fb02 f303 	mul.w	r3, r2, r3
 8002bb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bb8:	bf00      	nop
  }
  while (Delay --);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1e5a      	subs	r2, r3, #1
 8002bbe:	60fa      	str	r2, [r7, #12]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1f9      	bne.n	8002bb8 <RCC_Delay+0x1c>
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr
 8002bd0:	20000000 	.word	0x20000000
 8002bd4:	10624dd3 	.word	0x10624dd3

08002bd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e042      	b.n	8002c70 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d106      	bne.n	8002c04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7fd fd88 	bl	8000714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2224      	movs	r2, #36	; 0x24
 8002c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f82b 	bl	8002c78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	691a      	ldr	r2, [r3, #16]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2220      	movs	r2, #32
 8002c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002cb2:	f023 030c 	bic.w	r3, r3, #12
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6812      	ldr	r2, [r2, #0]
 8002cba:	68b9      	ldr	r1, [r7, #8]
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a2c      	ldr	r2, [pc, #176]	; (8002d8c <UART_SetConfig+0x114>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d103      	bne.n	8002ce8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ce0:	f7ff ff48 	bl	8002b74 <HAL_RCC_GetPCLK2Freq>
 8002ce4:	60f8      	str	r0, [r7, #12]
 8002ce6:	e002      	b.n	8002cee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ce8:	f7ff ff30 	bl	8002b4c <HAL_RCC_GetPCLK1Freq>
 8002cec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009a      	lsls	r2, r3, #2
 8002cf8:	441a      	add	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d04:	4a22      	ldr	r2, [pc, #136]	; (8002d90 <UART_SetConfig+0x118>)
 8002d06:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	0119      	lsls	r1, r3, #4
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	009a      	lsls	r2, r3, #2
 8002d18:	441a      	add	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d24:	4b1a      	ldr	r3, [pc, #104]	; (8002d90 <UART_SetConfig+0x118>)
 8002d26:	fba3 0302 	umull	r0, r3, r3, r2
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	2064      	movs	r0, #100	; 0x64
 8002d2e:	fb00 f303 	mul.w	r3, r0, r3
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	3332      	adds	r3, #50	; 0x32
 8002d38:	4a15      	ldr	r2, [pc, #84]	; (8002d90 <UART_SetConfig+0x118>)
 8002d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d44:	4419      	add	r1, r3
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009a      	lsls	r2, r3, #2
 8002d50:	441a      	add	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <UART_SetConfig+0x118>)
 8002d5e:	fba3 0302 	umull	r0, r3, r3, r2
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	2064      	movs	r0, #100	; 0x64
 8002d66:	fb00 f303 	mul.w	r3, r0, r3
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	3332      	adds	r3, #50	; 0x32
 8002d70:	4a07      	ldr	r2, [pc, #28]	; (8002d90 <UART_SetConfig+0x118>)
 8002d72:	fba2 2303 	umull	r2, r3, r2, r3
 8002d76:	095b      	lsrs	r3, r3, #5
 8002d78:	f003 020f 	and.w	r2, r3, #15
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	440a      	add	r2, r1
 8002d82:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d84:	bf00      	nop
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40013800 	.word	0x40013800
 8002d90:	51eb851f 	.word	0x51eb851f

08002d94 <siprintf>:
 8002d94:	b40e      	push	{r1, r2, r3}
 8002d96:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002d9a:	b500      	push	{lr}
 8002d9c:	b09c      	sub	sp, #112	; 0x70
 8002d9e:	ab1d      	add	r3, sp, #116	; 0x74
 8002da0:	9002      	str	r0, [sp, #8]
 8002da2:	9006      	str	r0, [sp, #24]
 8002da4:	9107      	str	r1, [sp, #28]
 8002da6:	9104      	str	r1, [sp, #16]
 8002da8:	4808      	ldr	r0, [pc, #32]	; (8002dcc <siprintf+0x38>)
 8002daa:	4909      	ldr	r1, [pc, #36]	; (8002dd0 <siprintf+0x3c>)
 8002dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8002db0:	9105      	str	r1, [sp, #20]
 8002db2:	6800      	ldr	r0, [r0, #0]
 8002db4:	a902      	add	r1, sp, #8
 8002db6:	9301      	str	r3, [sp, #4]
 8002db8:	f000 f9b6 	bl	8003128 <_svfiprintf_r>
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	9b02      	ldr	r3, [sp, #8]
 8002dc0:	701a      	strb	r2, [r3, #0]
 8002dc2:	b01c      	add	sp, #112	; 0x70
 8002dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002dc8:	b003      	add	sp, #12
 8002dca:	4770      	bx	lr
 8002dcc:	20000060 	.word	0x20000060
 8002dd0:	ffff0208 	.word	0xffff0208

08002dd4 <memmove>:
 8002dd4:	4288      	cmp	r0, r1
 8002dd6:	b510      	push	{r4, lr}
 8002dd8:	eb01 0402 	add.w	r4, r1, r2
 8002ddc:	d902      	bls.n	8002de4 <memmove+0x10>
 8002dde:	4284      	cmp	r4, r0
 8002de0:	4623      	mov	r3, r4
 8002de2:	d807      	bhi.n	8002df4 <memmove+0x20>
 8002de4:	1e43      	subs	r3, r0, #1
 8002de6:	42a1      	cmp	r1, r4
 8002de8:	d008      	beq.n	8002dfc <memmove+0x28>
 8002dea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002dee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002df2:	e7f8      	b.n	8002de6 <memmove+0x12>
 8002df4:	4601      	mov	r1, r0
 8002df6:	4402      	add	r2, r0
 8002df8:	428a      	cmp	r2, r1
 8002dfa:	d100      	bne.n	8002dfe <memmove+0x2a>
 8002dfc:	bd10      	pop	{r4, pc}
 8002dfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002e02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002e06:	e7f7      	b.n	8002df8 <memmove+0x24>

08002e08 <memset>:
 8002e08:	4603      	mov	r3, r0
 8002e0a:	4402      	add	r2, r0
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d100      	bne.n	8002e12 <memset+0xa>
 8002e10:	4770      	bx	lr
 8002e12:	f803 1b01 	strb.w	r1, [r3], #1
 8002e16:	e7f9      	b.n	8002e0c <memset+0x4>

08002e18 <__errno>:
 8002e18:	4b01      	ldr	r3, [pc, #4]	; (8002e20 <__errno+0x8>)
 8002e1a:	6818      	ldr	r0, [r3, #0]
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20000060 	.word	0x20000060

08002e24 <__libc_init_array>:
 8002e24:	b570      	push	{r4, r5, r6, lr}
 8002e26:	2600      	movs	r6, #0
 8002e28:	4d0c      	ldr	r5, [pc, #48]	; (8002e5c <__libc_init_array+0x38>)
 8002e2a:	4c0d      	ldr	r4, [pc, #52]	; (8002e60 <__libc_init_array+0x3c>)
 8002e2c:	1b64      	subs	r4, r4, r5
 8002e2e:	10a4      	asrs	r4, r4, #2
 8002e30:	42a6      	cmp	r6, r4
 8002e32:	d109      	bne.n	8002e48 <__libc_init_array+0x24>
 8002e34:	f000 fc60 	bl	80036f8 <_init>
 8002e38:	2600      	movs	r6, #0
 8002e3a:	4d0a      	ldr	r5, [pc, #40]	; (8002e64 <__libc_init_array+0x40>)
 8002e3c:	4c0a      	ldr	r4, [pc, #40]	; (8002e68 <__libc_init_array+0x44>)
 8002e3e:	1b64      	subs	r4, r4, r5
 8002e40:	10a4      	asrs	r4, r4, #2
 8002e42:	42a6      	cmp	r6, r4
 8002e44:	d105      	bne.n	8002e52 <__libc_init_array+0x2e>
 8002e46:	bd70      	pop	{r4, r5, r6, pc}
 8002e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e4c:	4798      	blx	r3
 8002e4e:	3601      	adds	r6, #1
 8002e50:	e7ee      	b.n	8002e30 <__libc_init_array+0xc>
 8002e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e56:	4798      	blx	r3
 8002e58:	3601      	adds	r6, #1
 8002e5a:	e7f2      	b.n	8002e42 <__libc_init_array+0x1e>
 8002e5c:	08003ef4 	.word	0x08003ef4
 8002e60:	08003ef4 	.word	0x08003ef4
 8002e64:	08003ef4 	.word	0x08003ef4
 8002e68:	08003ef8 	.word	0x08003ef8

08002e6c <__retarget_lock_acquire_recursive>:
 8002e6c:	4770      	bx	lr

08002e6e <__retarget_lock_release_recursive>:
 8002e6e:	4770      	bx	lr

08002e70 <memcpy>:
 8002e70:	440a      	add	r2, r1
 8002e72:	4291      	cmp	r1, r2
 8002e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8002e78:	d100      	bne.n	8002e7c <memcpy+0xc>
 8002e7a:	4770      	bx	lr
 8002e7c:	b510      	push	{r4, lr}
 8002e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e82:	4291      	cmp	r1, r2
 8002e84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e88:	d1f9      	bne.n	8002e7e <memcpy+0xe>
 8002e8a:	bd10      	pop	{r4, pc}

08002e8c <_free_r>:
 8002e8c:	b538      	push	{r3, r4, r5, lr}
 8002e8e:	4605      	mov	r5, r0
 8002e90:	2900      	cmp	r1, #0
 8002e92:	d040      	beq.n	8002f16 <_free_r+0x8a>
 8002e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e98:	1f0c      	subs	r4, r1, #4
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	bfb8      	it	lt
 8002e9e:	18e4      	addlt	r4, r4, r3
 8002ea0:	f000 f8dc 	bl	800305c <__malloc_lock>
 8002ea4:	4a1c      	ldr	r2, [pc, #112]	; (8002f18 <_free_r+0x8c>)
 8002ea6:	6813      	ldr	r3, [r2, #0]
 8002ea8:	b933      	cbnz	r3, 8002eb8 <_free_r+0x2c>
 8002eaa:	6063      	str	r3, [r4, #4]
 8002eac:	6014      	str	r4, [r2, #0]
 8002eae:	4628      	mov	r0, r5
 8002eb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002eb4:	f000 b8d8 	b.w	8003068 <__malloc_unlock>
 8002eb8:	42a3      	cmp	r3, r4
 8002eba:	d908      	bls.n	8002ece <_free_r+0x42>
 8002ebc:	6820      	ldr	r0, [r4, #0]
 8002ebe:	1821      	adds	r1, r4, r0
 8002ec0:	428b      	cmp	r3, r1
 8002ec2:	bf01      	itttt	eq
 8002ec4:	6819      	ldreq	r1, [r3, #0]
 8002ec6:	685b      	ldreq	r3, [r3, #4]
 8002ec8:	1809      	addeq	r1, r1, r0
 8002eca:	6021      	streq	r1, [r4, #0]
 8002ecc:	e7ed      	b.n	8002eaa <_free_r+0x1e>
 8002ece:	461a      	mov	r2, r3
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	b10b      	cbz	r3, 8002ed8 <_free_r+0x4c>
 8002ed4:	42a3      	cmp	r3, r4
 8002ed6:	d9fa      	bls.n	8002ece <_free_r+0x42>
 8002ed8:	6811      	ldr	r1, [r2, #0]
 8002eda:	1850      	adds	r0, r2, r1
 8002edc:	42a0      	cmp	r0, r4
 8002ede:	d10b      	bne.n	8002ef8 <_free_r+0x6c>
 8002ee0:	6820      	ldr	r0, [r4, #0]
 8002ee2:	4401      	add	r1, r0
 8002ee4:	1850      	adds	r0, r2, r1
 8002ee6:	4283      	cmp	r3, r0
 8002ee8:	6011      	str	r1, [r2, #0]
 8002eea:	d1e0      	bne.n	8002eae <_free_r+0x22>
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	4408      	add	r0, r1
 8002ef2:	6010      	str	r0, [r2, #0]
 8002ef4:	6053      	str	r3, [r2, #4]
 8002ef6:	e7da      	b.n	8002eae <_free_r+0x22>
 8002ef8:	d902      	bls.n	8002f00 <_free_r+0x74>
 8002efa:	230c      	movs	r3, #12
 8002efc:	602b      	str	r3, [r5, #0]
 8002efe:	e7d6      	b.n	8002eae <_free_r+0x22>
 8002f00:	6820      	ldr	r0, [r4, #0]
 8002f02:	1821      	adds	r1, r4, r0
 8002f04:	428b      	cmp	r3, r1
 8002f06:	bf01      	itttt	eq
 8002f08:	6819      	ldreq	r1, [r3, #0]
 8002f0a:	685b      	ldreq	r3, [r3, #4]
 8002f0c:	1809      	addeq	r1, r1, r0
 8002f0e:	6021      	streq	r1, [r4, #0]
 8002f10:	6063      	str	r3, [r4, #4]
 8002f12:	6054      	str	r4, [r2, #4]
 8002f14:	e7cb      	b.n	8002eae <_free_r+0x22>
 8002f16:	bd38      	pop	{r3, r4, r5, pc}
 8002f18:	200006d4 	.word	0x200006d4

08002f1c <sbrk_aligned>:
 8002f1c:	b570      	push	{r4, r5, r6, lr}
 8002f1e:	4e0e      	ldr	r6, [pc, #56]	; (8002f58 <sbrk_aligned+0x3c>)
 8002f20:	460c      	mov	r4, r1
 8002f22:	6831      	ldr	r1, [r6, #0]
 8002f24:	4605      	mov	r5, r0
 8002f26:	b911      	cbnz	r1, 8002f2e <sbrk_aligned+0x12>
 8002f28:	f000 fb90 	bl	800364c <_sbrk_r>
 8002f2c:	6030      	str	r0, [r6, #0]
 8002f2e:	4621      	mov	r1, r4
 8002f30:	4628      	mov	r0, r5
 8002f32:	f000 fb8b 	bl	800364c <_sbrk_r>
 8002f36:	1c43      	adds	r3, r0, #1
 8002f38:	d00a      	beq.n	8002f50 <sbrk_aligned+0x34>
 8002f3a:	1cc4      	adds	r4, r0, #3
 8002f3c:	f024 0403 	bic.w	r4, r4, #3
 8002f40:	42a0      	cmp	r0, r4
 8002f42:	d007      	beq.n	8002f54 <sbrk_aligned+0x38>
 8002f44:	1a21      	subs	r1, r4, r0
 8002f46:	4628      	mov	r0, r5
 8002f48:	f000 fb80 	bl	800364c <_sbrk_r>
 8002f4c:	3001      	adds	r0, #1
 8002f4e:	d101      	bne.n	8002f54 <sbrk_aligned+0x38>
 8002f50:	f04f 34ff 	mov.w	r4, #4294967295
 8002f54:	4620      	mov	r0, r4
 8002f56:	bd70      	pop	{r4, r5, r6, pc}
 8002f58:	200006d8 	.word	0x200006d8

08002f5c <_malloc_r>:
 8002f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f60:	1ccd      	adds	r5, r1, #3
 8002f62:	f025 0503 	bic.w	r5, r5, #3
 8002f66:	3508      	adds	r5, #8
 8002f68:	2d0c      	cmp	r5, #12
 8002f6a:	bf38      	it	cc
 8002f6c:	250c      	movcc	r5, #12
 8002f6e:	2d00      	cmp	r5, #0
 8002f70:	4607      	mov	r7, r0
 8002f72:	db01      	blt.n	8002f78 <_malloc_r+0x1c>
 8002f74:	42a9      	cmp	r1, r5
 8002f76:	d905      	bls.n	8002f84 <_malloc_r+0x28>
 8002f78:	230c      	movs	r3, #12
 8002f7a:	2600      	movs	r6, #0
 8002f7c:	603b      	str	r3, [r7, #0]
 8002f7e:	4630      	mov	r0, r6
 8002f80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003058 <_malloc_r+0xfc>
 8002f88:	f000 f868 	bl	800305c <__malloc_lock>
 8002f8c:	f8d8 3000 	ldr.w	r3, [r8]
 8002f90:	461c      	mov	r4, r3
 8002f92:	bb5c      	cbnz	r4, 8002fec <_malloc_r+0x90>
 8002f94:	4629      	mov	r1, r5
 8002f96:	4638      	mov	r0, r7
 8002f98:	f7ff ffc0 	bl	8002f1c <sbrk_aligned>
 8002f9c:	1c43      	adds	r3, r0, #1
 8002f9e:	4604      	mov	r4, r0
 8002fa0:	d155      	bne.n	800304e <_malloc_r+0xf2>
 8002fa2:	f8d8 4000 	ldr.w	r4, [r8]
 8002fa6:	4626      	mov	r6, r4
 8002fa8:	2e00      	cmp	r6, #0
 8002faa:	d145      	bne.n	8003038 <_malloc_r+0xdc>
 8002fac:	2c00      	cmp	r4, #0
 8002fae:	d048      	beq.n	8003042 <_malloc_r+0xe6>
 8002fb0:	6823      	ldr	r3, [r4, #0]
 8002fb2:	4631      	mov	r1, r6
 8002fb4:	4638      	mov	r0, r7
 8002fb6:	eb04 0903 	add.w	r9, r4, r3
 8002fba:	f000 fb47 	bl	800364c <_sbrk_r>
 8002fbe:	4581      	cmp	r9, r0
 8002fc0:	d13f      	bne.n	8003042 <_malloc_r+0xe6>
 8002fc2:	6821      	ldr	r1, [r4, #0]
 8002fc4:	4638      	mov	r0, r7
 8002fc6:	1a6d      	subs	r5, r5, r1
 8002fc8:	4629      	mov	r1, r5
 8002fca:	f7ff ffa7 	bl	8002f1c <sbrk_aligned>
 8002fce:	3001      	adds	r0, #1
 8002fd0:	d037      	beq.n	8003042 <_malloc_r+0xe6>
 8002fd2:	6823      	ldr	r3, [r4, #0]
 8002fd4:	442b      	add	r3, r5
 8002fd6:	6023      	str	r3, [r4, #0]
 8002fd8:	f8d8 3000 	ldr.w	r3, [r8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d038      	beq.n	8003052 <_malloc_r+0xf6>
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	42a2      	cmp	r2, r4
 8002fe4:	d12b      	bne.n	800303e <_malloc_r+0xe2>
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	e00f      	b.n	800300c <_malloc_r+0xb0>
 8002fec:	6822      	ldr	r2, [r4, #0]
 8002fee:	1b52      	subs	r2, r2, r5
 8002ff0:	d41f      	bmi.n	8003032 <_malloc_r+0xd6>
 8002ff2:	2a0b      	cmp	r2, #11
 8002ff4:	d917      	bls.n	8003026 <_malloc_r+0xca>
 8002ff6:	1961      	adds	r1, r4, r5
 8002ff8:	42a3      	cmp	r3, r4
 8002ffa:	6025      	str	r5, [r4, #0]
 8002ffc:	bf18      	it	ne
 8002ffe:	6059      	strne	r1, [r3, #4]
 8003000:	6863      	ldr	r3, [r4, #4]
 8003002:	bf08      	it	eq
 8003004:	f8c8 1000 	streq.w	r1, [r8]
 8003008:	5162      	str	r2, [r4, r5]
 800300a:	604b      	str	r3, [r1, #4]
 800300c:	4638      	mov	r0, r7
 800300e:	f104 060b 	add.w	r6, r4, #11
 8003012:	f000 f829 	bl	8003068 <__malloc_unlock>
 8003016:	f026 0607 	bic.w	r6, r6, #7
 800301a:	1d23      	adds	r3, r4, #4
 800301c:	1af2      	subs	r2, r6, r3
 800301e:	d0ae      	beq.n	8002f7e <_malloc_r+0x22>
 8003020:	1b9b      	subs	r3, r3, r6
 8003022:	50a3      	str	r3, [r4, r2]
 8003024:	e7ab      	b.n	8002f7e <_malloc_r+0x22>
 8003026:	42a3      	cmp	r3, r4
 8003028:	6862      	ldr	r2, [r4, #4]
 800302a:	d1dd      	bne.n	8002fe8 <_malloc_r+0x8c>
 800302c:	f8c8 2000 	str.w	r2, [r8]
 8003030:	e7ec      	b.n	800300c <_malloc_r+0xb0>
 8003032:	4623      	mov	r3, r4
 8003034:	6864      	ldr	r4, [r4, #4]
 8003036:	e7ac      	b.n	8002f92 <_malloc_r+0x36>
 8003038:	4634      	mov	r4, r6
 800303a:	6876      	ldr	r6, [r6, #4]
 800303c:	e7b4      	b.n	8002fa8 <_malloc_r+0x4c>
 800303e:	4613      	mov	r3, r2
 8003040:	e7cc      	b.n	8002fdc <_malloc_r+0x80>
 8003042:	230c      	movs	r3, #12
 8003044:	4638      	mov	r0, r7
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	f000 f80e 	bl	8003068 <__malloc_unlock>
 800304c:	e797      	b.n	8002f7e <_malloc_r+0x22>
 800304e:	6025      	str	r5, [r4, #0]
 8003050:	e7dc      	b.n	800300c <_malloc_r+0xb0>
 8003052:	605b      	str	r3, [r3, #4]
 8003054:	deff      	udf	#255	; 0xff
 8003056:	bf00      	nop
 8003058:	200006d4 	.word	0x200006d4

0800305c <__malloc_lock>:
 800305c:	4801      	ldr	r0, [pc, #4]	; (8003064 <__malloc_lock+0x8>)
 800305e:	f7ff bf05 	b.w	8002e6c <__retarget_lock_acquire_recursive>
 8003062:	bf00      	nop
 8003064:	200006d0 	.word	0x200006d0

08003068 <__malloc_unlock>:
 8003068:	4801      	ldr	r0, [pc, #4]	; (8003070 <__malloc_unlock+0x8>)
 800306a:	f7ff bf00 	b.w	8002e6e <__retarget_lock_release_recursive>
 800306e:	bf00      	nop
 8003070:	200006d0 	.word	0x200006d0

08003074 <__ssputs_r>:
 8003074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003078:	461f      	mov	r7, r3
 800307a:	688e      	ldr	r6, [r1, #8]
 800307c:	4682      	mov	sl, r0
 800307e:	42be      	cmp	r6, r7
 8003080:	460c      	mov	r4, r1
 8003082:	4690      	mov	r8, r2
 8003084:	680b      	ldr	r3, [r1, #0]
 8003086:	d82c      	bhi.n	80030e2 <__ssputs_r+0x6e>
 8003088:	898a      	ldrh	r2, [r1, #12]
 800308a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800308e:	d026      	beq.n	80030de <__ssputs_r+0x6a>
 8003090:	6965      	ldr	r5, [r4, #20]
 8003092:	6909      	ldr	r1, [r1, #16]
 8003094:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003098:	eba3 0901 	sub.w	r9, r3, r1
 800309c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80030a0:	1c7b      	adds	r3, r7, #1
 80030a2:	444b      	add	r3, r9
 80030a4:	106d      	asrs	r5, r5, #1
 80030a6:	429d      	cmp	r5, r3
 80030a8:	bf38      	it	cc
 80030aa:	461d      	movcc	r5, r3
 80030ac:	0553      	lsls	r3, r2, #21
 80030ae:	d527      	bpl.n	8003100 <__ssputs_r+0x8c>
 80030b0:	4629      	mov	r1, r5
 80030b2:	f7ff ff53 	bl	8002f5c <_malloc_r>
 80030b6:	4606      	mov	r6, r0
 80030b8:	b360      	cbz	r0, 8003114 <__ssputs_r+0xa0>
 80030ba:	464a      	mov	r2, r9
 80030bc:	6921      	ldr	r1, [r4, #16]
 80030be:	f7ff fed7 	bl	8002e70 <memcpy>
 80030c2:	89a3      	ldrh	r3, [r4, #12]
 80030c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80030c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030cc:	81a3      	strh	r3, [r4, #12]
 80030ce:	6126      	str	r6, [r4, #16]
 80030d0:	444e      	add	r6, r9
 80030d2:	6026      	str	r6, [r4, #0]
 80030d4:	463e      	mov	r6, r7
 80030d6:	6165      	str	r5, [r4, #20]
 80030d8:	eba5 0509 	sub.w	r5, r5, r9
 80030dc:	60a5      	str	r5, [r4, #8]
 80030de:	42be      	cmp	r6, r7
 80030e0:	d900      	bls.n	80030e4 <__ssputs_r+0x70>
 80030e2:	463e      	mov	r6, r7
 80030e4:	4632      	mov	r2, r6
 80030e6:	4641      	mov	r1, r8
 80030e8:	6820      	ldr	r0, [r4, #0]
 80030ea:	f7ff fe73 	bl	8002dd4 <memmove>
 80030ee:	2000      	movs	r0, #0
 80030f0:	68a3      	ldr	r3, [r4, #8]
 80030f2:	1b9b      	subs	r3, r3, r6
 80030f4:	60a3      	str	r3, [r4, #8]
 80030f6:	6823      	ldr	r3, [r4, #0]
 80030f8:	4433      	add	r3, r6
 80030fa:	6023      	str	r3, [r4, #0]
 80030fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003100:	462a      	mov	r2, r5
 8003102:	f000 fac1 	bl	8003688 <_realloc_r>
 8003106:	4606      	mov	r6, r0
 8003108:	2800      	cmp	r0, #0
 800310a:	d1e0      	bne.n	80030ce <__ssputs_r+0x5a>
 800310c:	4650      	mov	r0, sl
 800310e:	6921      	ldr	r1, [r4, #16]
 8003110:	f7ff febc 	bl	8002e8c <_free_r>
 8003114:	230c      	movs	r3, #12
 8003116:	f8ca 3000 	str.w	r3, [sl]
 800311a:	89a3      	ldrh	r3, [r4, #12]
 800311c:	f04f 30ff 	mov.w	r0, #4294967295
 8003120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003124:	81a3      	strh	r3, [r4, #12]
 8003126:	e7e9      	b.n	80030fc <__ssputs_r+0x88>

08003128 <_svfiprintf_r>:
 8003128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800312c:	4698      	mov	r8, r3
 800312e:	898b      	ldrh	r3, [r1, #12]
 8003130:	4607      	mov	r7, r0
 8003132:	061b      	lsls	r3, r3, #24
 8003134:	460d      	mov	r5, r1
 8003136:	4614      	mov	r4, r2
 8003138:	b09d      	sub	sp, #116	; 0x74
 800313a:	d50e      	bpl.n	800315a <_svfiprintf_r+0x32>
 800313c:	690b      	ldr	r3, [r1, #16]
 800313e:	b963      	cbnz	r3, 800315a <_svfiprintf_r+0x32>
 8003140:	2140      	movs	r1, #64	; 0x40
 8003142:	f7ff ff0b 	bl	8002f5c <_malloc_r>
 8003146:	6028      	str	r0, [r5, #0]
 8003148:	6128      	str	r0, [r5, #16]
 800314a:	b920      	cbnz	r0, 8003156 <_svfiprintf_r+0x2e>
 800314c:	230c      	movs	r3, #12
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	f04f 30ff 	mov.w	r0, #4294967295
 8003154:	e0d0      	b.n	80032f8 <_svfiprintf_r+0x1d0>
 8003156:	2340      	movs	r3, #64	; 0x40
 8003158:	616b      	str	r3, [r5, #20]
 800315a:	2300      	movs	r3, #0
 800315c:	9309      	str	r3, [sp, #36]	; 0x24
 800315e:	2320      	movs	r3, #32
 8003160:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003164:	2330      	movs	r3, #48	; 0x30
 8003166:	f04f 0901 	mov.w	r9, #1
 800316a:	f8cd 800c 	str.w	r8, [sp, #12]
 800316e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003310 <_svfiprintf_r+0x1e8>
 8003172:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003176:	4623      	mov	r3, r4
 8003178:	469a      	mov	sl, r3
 800317a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800317e:	b10a      	cbz	r2, 8003184 <_svfiprintf_r+0x5c>
 8003180:	2a25      	cmp	r2, #37	; 0x25
 8003182:	d1f9      	bne.n	8003178 <_svfiprintf_r+0x50>
 8003184:	ebba 0b04 	subs.w	fp, sl, r4
 8003188:	d00b      	beq.n	80031a2 <_svfiprintf_r+0x7a>
 800318a:	465b      	mov	r3, fp
 800318c:	4622      	mov	r2, r4
 800318e:	4629      	mov	r1, r5
 8003190:	4638      	mov	r0, r7
 8003192:	f7ff ff6f 	bl	8003074 <__ssputs_r>
 8003196:	3001      	adds	r0, #1
 8003198:	f000 80a9 	beq.w	80032ee <_svfiprintf_r+0x1c6>
 800319c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800319e:	445a      	add	r2, fp
 80031a0:	9209      	str	r2, [sp, #36]	; 0x24
 80031a2:	f89a 3000 	ldrb.w	r3, [sl]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 80a1 	beq.w	80032ee <_svfiprintf_r+0x1c6>
 80031ac:	2300      	movs	r3, #0
 80031ae:	f04f 32ff 	mov.w	r2, #4294967295
 80031b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031b6:	f10a 0a01 	add.w	sl, sl, #1
 80031ba:	9304      	str	r3, [sp, #16]
 80031bc:	9307      	str	r3, [sp, #28]
 80031be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80031c2:	931a      	str	r3, [sp, #104]	; 0x68
 80031c4:	4654      	mov	r4, sl
 80031c6:	2205      	movs	r2, #5
 80031c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031cc:	4850      	ldr	r0, [pc, #320]	; (8003310 <_svfiprintf_r+0x1e8>)
 80031ce:	f000 fa4d 	bl	800366c <memchr>
 80031d2:	9a04      	ldr	r2, [sp, #16]
 80031d4:	b9d8      	cbnz	r0, 800320e <_svfiprintf_r+0xe6>
 80031d6:	06d0      	lsls	r0, r2, #27
 80031d8:	bf44      	itt	mi
 80031da:	2320      	movmi	r3, #32
 80031dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031e0:	0711      	lsls	r1, r2, #28
 80031e2:	bf44      	itt	mi
 80031e4:	232b      	movmi	r3, #43	; 0x2b
 80031e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031ea:	f89a 3000 	ldrb.w	r3, [sl]
 80031ee:	2b2a      	cmp	r3, #42	; 0x2a
 80031f0:	d015      	beq.n	800321e <_svfiprintf_r+0xf6>
 80031f2:	4654      	mov	r4, sl
 80031f4:	2000      	movs	r0, #0
 80031f6:	f04f 0c0a 	mov.w	ip, #10
 80031fa:	9a07      	ldr	r2, [sp, #28]
 80031fc:	4621      	mov	r1, r4
 80031fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003202:	3b30      	subs	r3, #48	; 0x30
 8003204:	2b09      	cmp	r3, #9
 8003206:	d94d      	bls.n	80032a4 <_svfiprintf_r+0x17c>
 8003208:	b1b0      	cbz	r0, 8003238 <_svfiprintf_r+0x110>
 800320a:	9207      	str	r2, [sp, #28]
 800320c:	e014      	b.n	8003238 <_svfiprintf_r+0x110>
 800320e:	eba0 0308 	sub.w	r3, r0, r8
 8003212:	fa09 f303 	lsl.w	r3, r9, r3
 8003216:	4313      	orrs	r3, r2
 8003218:	46a2      	mov	sl, r4
 800321a:	9304      	str	r3, [sp, #16]
 800321c:	e7d2      	b.n	80031c4 <_svfiprintf_r+0x9c>
 800321e:	9b03      	ldr	r3, [sp, #12]
 8003220:	1d19      	adds	r1, r3, #4
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	9103      	str	r1, [sp, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	bfbb      	ittet	lt
 800322a:	425b      	neglt	r3, r3
 800322c:	f042 0202 	orrlt.w	r2, r2, #2
 8003230:	9307      	strge	r3, [sp, #28]
 8003232:	9307      	strlt	r3, [sp, #28]
 8003234:	bfb8      	it	lt
 8003236:	9204      	strlt	r2, [sp, #16]
 8003238:	7823      	ldrb	r3, [r4, #0]
 800323a:	2b2e      	cmp	r3, #46	; 0x2e
 800323c:	d10c      	bne.n	8003258 <_svfiprintf_r+0x130>
 800323e:	7863      	ldrb	r3, [r4, #1]
 8003240:	2b2a      	cmp	r3, #42	; 0x2a
 8003242:	d134      	bne.n	80032ae <_svfiprintf_r+0x186>
 8003244:	9b03      	ldr	r3, [sp, #12]
 8003246:	3402      	adds	r4, #2
 8003248:	1d1a      	adds	r2, r3, #4
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	9203      	str	r2, [sp, #12]
 800324e:	2b00      	cmp	r3, #0
 8003250:	bfb8      	it	lt
 8003252:	f04f 33ff 	movlt.w	r3, #4294967295
 8003256:	9305      	str	r3, [sp, #20]
 8003258:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003314 <_svfiprintf_r+0x1ec>
 800325c:	2203      	movs	r2, #3
 800325e:	4650      	mov	r0, sl
 8003260:	7821      	ldrb	r1, [r4, #0]
 8003262:	f000 fa03 	bl	800366c <memchr>
 8003266:	b138      	cbz	r0, 8003278 <_svfiprintf_r+0x150>
 8003268:	2240      	movs	r2, #64	; 0x40
 800326a:	9b04      	ldr	r3, [sp, #16]
 800326c:	eba0 000a 	sub.w	r0, r0, sl
 8003270:	4082      	lsls	r2, r0
 8003272:	4313      	orrs	r3, r2
 8003274:	3401      	adds	r4, #1
 8003276:	9304      	str	r3, [sp, #16]
 8003278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800327c:	2206      	movs	r2, #6
 800327e:	4826      	ldr	r0, [pc, #152]	; (8003318 <_svfiprintf_r+0x1f0>)
 8003280:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003284:	f000 f9f2 	bl	800366c <memchr>
 8003288:	2800      	cmp	r0, #0
 800328a:	d038      	beq.n	80032fe <_svfiprintf_r+0x1d6>
 800328c:	4b23      	ldr	r3, [pc, #140]	; (800331c <_svfiprintf_r+0x1f4>)
 800328e:	bb1b      	cbnz	r3, 80032d8 <_svfiprintf_r+0x1b0>
 8003290:	9b03      	ldr	r3, [sp, #12]
 8003292:	3307      	adds	r3, #7
 8003294:	f023 0307 	bic.w	r3, r3, #7
 8003298:	3308      	adds	r3, #8
 800329a:	9303      	str	r3, [sp, #12]
 800329c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800329e:	4433      	add	r3, r6
 80032a0:	9309      	str	r3, [sp, #36]	; 0x24
 80032a2:	e768      	b.n	8003176 <_svfiprintf_r+0x4e>
 80032a4:	460c      	mov	r4, r1
 80032a6:	2001      	movs	r0, #1
 80032a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80032ac:	e7a6      	b.n	80031fc <_svfiprintf_r+0xd4>
 80032ae:	2300      	movs	r3, #0
 80032b0:	f04f 0c0a 	mov.w	ip, #10
 80032b4:	4619      	mov	r1, r3
 80032b6:	3401      	adds	r4, #1
 80032b8:	9305      	str	r3, [sp, #20]
 80032ba:	4620      	mov	r0, r4
 80032bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032c0:	3a30      	subs	r2, #48	; 0x30
 80032c2:	2a09      	cmp	r2, #9
 80032c4:	d903      	bls.n	80032ce <_svfiprintf_r+0x1a6>
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0c6      	beq.n	8003258 <_svfiprintf_r+0x130>
 80032ca:	9105      	str	r1, [sp, #20]
 80032cc:	e7c4      	b.n	8003258 <_svfiprintf_r+0x130>
 80032ce:	4604      	mov	r4, r0
 80032d0:	2301      	movs	r3, #1
 80032d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80032d6:	e7f0      	b.n	80032ba <_svfiprintf_r+0x192>
 80032d8:	ab03      	add	r3, sp, #12
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	462a      	mov	r2, r5
 80032de:	4638      	mov	r0, r7
 80032e0:	4b0f      	ldr	r3, [pc, #60]	; (8003320 <_svfiprintf_r+0x1f8>)
 80032e2:	a904      	add	r1, sp, #16
 80032e4:	f3af 8000 	nop.w
 80032e8:	1c42      	adds	r2, r0, #1
 80032ea:	4606      	mov	r6, r0
 80032ec:	d1d6      	bne.n	800329c <_svfiprintf_r+0x174>
 80032ee:	89ab      	ldrh	r3, [r5, #12]
 80032f0:	065b      	lsls	r3, r3, #25
 80032f2:	f53f af2d 	bmi.w	8003150 <_svfiprintf_r+0x28>
 80032f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032f8:	b01d      	add	sp, #116	; 0x74
 80032fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032fe:	ab03      	add	r3, sp, #12
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	462a      	mov	r2, r5
 8003304:	4638      	mov	r0, r7
 8003306:	4b06      	ldr	r3, [pc, #24]	; (8003320 <_svfiprintf_r+0x1f8>)
 8003308:	a904      	add	r1, sp, #16
 800330a:	f000 f87d 	bl	8003408 <_printf_i>
 800330e:	e7eb      	b.n	80032e8 <_svfiprintf_r+0x1c0>
 8003310:	08003ebe 	.word	0x08003ebe
 8003314:	08003ec4 	.word	0x08003ec4
 8003318:	08003ec8 	.word	0x08003ec8
 800331c:	00000000 	.word	0x00000000
 8003320:	08003075 	.word	0x08003075

08003324 <_printf_common>:
 8003324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003328:	4616      	mov	r6, r2
 800332a:	4699      	mov	r9, r3
 800332c:	688a      	ldr	r2, [r1, #8]
 800332e:	690b      	ldr	r3, [r1, #16]
 8003330:	4607      	mov	r7, r0
 8003332:	4293      	cmp	r3, r2
 8003334:	bfb8      	it	lt
 8003336:	4613      	movlt	r3, r2
 8003338:	6033      	str	r3, [r6, #0]
 800333a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800333e:	460c      	mov	r4, r1
 8003340:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003344:	b10a      	cbz	r2, 800334a <_printf_common+0x26>
 8003346:	3301      	adds	r3, #1
 8003348:	6033      	str	r3, [r6, #0]
 800334a:	6823      	ldr	r3, [r4, #0]
 800334c:	0699      	lsls	r1, r3, #26
 800334e:	bf42      	ittt	mi
 8003350:	6833      	ldrmi	r3, [r6, #0]
 8003352:	3302      	addmi	r3, #2
 8003354:	6033      	strmi	r3, [r6, #0]
 8003356:	6825      	ldr	r5, [r4, #0]
 8003358:	f015 0506 	ands.w	r5, r5, #6
 800335c:	d106      	bne.n	800336c <_printf_common+0x48>
 800335e:	f104 0a19 	add.w	sl, r4, #25
 8003362:	68e3      	ldr	r3, [r4, #12]
 8003364:	6832      	ldr	r2, [r6, #0]
 8003366:	1a9b      	subs	r3, r3, r2
 8003368:	42ab      	cmp	r3, r5
 800336a:	dc2b      	bgt.n	80033c4 <_printf_common+0xa0>
 800336c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003370:	1e13      	subs	r3, r2, #0
 8003372:	6822      	ldr	r2, [r4, #0]
 8003374:	bf18      	it	ne
 8003376:	2301      	movne	r3, #1
 8003378:	0692      	lsls	r2, r2, #26
 800337a:	d430      	bmi.n	80033de <_printf_common+0xba>
 800337c:	4649      	mov	r1, r9
 800337e:	4638      	mov	r0, r7
 8003380:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003384:	47c0      	blx	r8
 8003386:	3001      	adds	r0, #1
 8003388:	d023      	beq.n	80033d2 <_printf_common+0xae>
 800338a:	6823      	ldr	r3, [r4, #0]
 800338c:	6922      	ldr	r2, [r4, #16]
 800338e:	f003 0306 	and.w	r3, r3, #6
 8003392:	2b04      	cmp	r3, #4
 8003394:	bf14      	ite	ne
 8003396:	2500      	movne	r5, #0
 8003398:	6833      	ldreq	r3, [r6, #0]
 800339a:	f04f 0600 	mov.w	r6, #0
 800339e:	bf08      	it	eq
 80033a0:	68e5      	ldreq	r5, [r4, #12]
 80033a2:	f104 041a 	add.w	r4, r4, #26
 80033a6:	bf08      	it	eq
 80033a8:	1aed      	subeq	r5, r5, r3
 80033aa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80033ae:	bf08      	it	eq
 80033b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033b4:	4293      	cmp	r3, r2
 80033b6:	bfc4      	itt	gt
 80033b8:	1a9b      	subgt	r3, r3, r2
 80033ba:	18ed      	addgt	r5, r5, r3
 80033bc:	42b5      	cmp	r5, r6
 80033be:	d11a      	bne.n	80033f6 <_printf_common+0xd2>
 80033c0:	2000      	movs	r0, #0
 80033c2:	e008      	b.n	80033d6 <_printf_common+0xb2>
 80033c4:	2301      	movs	r3, #1
 80033c6:	4652      	mov	r2, sl
 80033c8:	4649      	mov	r1, r9
 80033ca:	4638      	mov	r0, r7
 80033cc:	47c0      	blx	r8
 80033ce:	3001      	adds	r0, #1
 80033d0:	d103      	bne.n	80033da <_printf_common+0xb6>
 80033d2:	f04f 30ff 	mov.w	r0, #4294967295
 80033d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033da:	3501      	adds	r5, #1
 80033dc:	e7c1      	b.n	8003362 <_printf_common+0x3e>
 80033de:	2030      	movs	r0, #48	; 0x30
 80033e0:	18e1      	adds	r1, r4, r3
 80033e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033ec:	4422      	add	r2, r4
 80033ee:	3302      	adds	r3, #2
 80033f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033f4:	e7c2      	b.n	800337c <_printf_common+0x58>
 80033f6:	2301      	movs	r3, #1
 80033f8:	4622      	mov	r2, r4
 80033fa:	4649      	mov	r1, r9
 80033fc:	4638      	mov	r0, r7
 80033fe:	47c0      	blx	r8
 8003400:	3001      	adds	r0, #1
 8003402:	d0e6      	beq.n	80033d2 <_printf_common+0xae>
 8003404:	3601      	adds	r6, #1
 8003406:	e7d9      	b.n	80033bc <_printf_common+0x98>

08003408 <_printf_i>:
 8003408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800340c:	7e0f      	ldrb	r7, [r1, #24]
 800340e:	4691      	mov	r9, r2
 8003410:	2f78      	cmp	r7, #120	; 0x78
 8003412:	4680      	mov	r8, r0
 8003414:	460c      	mov	r4, r1
 8003416:	469a      	mov	sl, r3
 8003418:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800341a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800341e:	d807      	bhi.n	8003430 <_printf_i+0x28>
 8003420:	2f62      	cmp	r7, #98	; 0x62
 8003422:	d80a      	bhi.n	800343a <_printf_i+0x32>
 8003424:	2f00      	cmp	r7, #0
 8003426:	f000 80d5 	beq.w	80035d4 <_printf_i+0x1cc>
 800342a:	2f58      	cmp	r7, #88	; 0x58
 800342c:	f000 80c1 	beq.w	80035b2 <_printf_i+0x1aa>
 8003430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003434:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003438:	e03a      	b.n	80034b0 <_printf_i+0xa8>
 800343a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800343e:	2b15      	cmp	r3, #21
 8003440:	d8f6      	bhi.n	8003430 <_printf_i+0x28>
 8003442:	a101      	add	r1, pc, #4	; (adr r1, 8003448 <_printf_i+0x40>)
 8003444:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003448:	080034a1 	.word	0x080034a1
 800344c:	080034b5 	.word	0x080034b5
 8003450:	08003431 	.word	0x08003431
 8003454:	08003431 	.word	0x08003431
 8003458:	08003431 	.word	0x08003431
 800345c:	08003431 	.word	0x08003431
 8003460:	080034b5 	.word	0x080034b5
 8003464:	08003431 	.word	0x08003431
 8003468:	08003431 	.word	0x08003431
 800346c:	08003431 	.word	0x08003431
 8003470:	08003431 	.word	0x08003431
 8003474:	080035bb 	.word	0x080035bb
 8003478:	080034e1 	.word	0x080034e1
 800347c:	08003575 	.word	0x08003575
 8003480:	08003431 	.word	0x08003431
 8003484:	08003431 	.word	0x08003431
 8003488:	080035dd 	.word	0x080035dd
 800348c:	08003431 	.word	0x08003431
 8003490:	080034e1 	.word	0x080034e1
 8003494:	08003431 	.word	0x08003431
 8003498:	08003431 	.word	0x08003431
 800349c:	0800357d 	.word	0x0800357d
 80034a0:	682b      	ldr	r3, [r5, #0]
 80034a2:	1d1a      	adds	r2, r3, #4
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	602a      	str	r2, [r5, #0]
 80034a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0a0      	b.n	80035f6 <_printf_i+0x1ee>
 80034b4:	6820      	ldr	r0, [r4, #0]
 80034b6:	682b      	ldr	r3, [r5, #0]
 80034b8:	0607      	lsls	r7, r0, #24
 80034ba:	f103 0104 	add.w	r1, r3, #4
 80034be:	6029      	str	r1, [r5, #0]
 80034c0:	d501      	bpl.n	80034c6 <_printf_i+0xbe>
 80034c2:	681e      	ldr	r6, [r3, #0]
 80034c4:	e003      	b.n	80034ce <_printf_i+0xc6>
 80034c6:	0646      	lsls	r6, r0, #25
 80034c8:	d5fb      	bpl.n	80034c2 <_printf_i+0xba>
 80034ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80034ce:	2e00      	cmp	r6, #0
 80034d0:	da03      	bge.n	80034da <_printf_i+0xd2>
 80034d2:	232d      	movs	r3, #45	; 0x2d
 80034d4:	4276      	negs	r6, r6
 80034d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034da:	230a      	movs	r3, #10
 80034dc:	4859      	ldr	r0, [pc, #356]	; (8003644 <_printf_i+0x23c>)
 80034de:	e012      	b.n	8003506 <_printf_i+0xfe>
 80034e0:	682b      	ldr	r3, [r5, #0]
 80034e2:	6820      	ldr	r0, [r4, #0]
 80034e4:	1d19      	adds	r1, r3, #4
 80034e6:	6029      	str	r1, [r5, #0]
 80034e8:	0605      	lsls	r5, r0, #24
 80034ea:	d501      	bpl.n	80034f0 <_printf_i+0xe8>
 80034ec:	681e      	ldr	r6, [r3, #0]
 80034ee:	e002      	b.n	80034f6 <_printf_i+0xee>
 80034f0:	0641      	lsls	r1, r0, #25
 80034f2:	d5fb      	bpl.n	80034ec <_printf_i+0xe4>
 80034f4:	881e      	ldrh	r6, [r3, #0]
 80034f6:	2f6f      	cmp	r7, #111	; 0x6f
 80034f8:	bf0c      	ite	eq
 80034fa:	2308      	moveq	r3, #8
 80034fc:	230a      	movne	r3, #10
 80034fe:	4851      	ldr	r0, [pc, #324]	; (8003644 <_printf_i+0x23c>)
 8003500:	2100      	movs	r1, #0
 8003502:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003506:	6865      	ldr	r5, [r4, #4]
 8003508:	2d00      	cmp	r5, #0
 800350a:	bfa8      	it	ge
 800350c:	6821      	ldrge	r1, [r4, #0]
 800350e:	60a5      	str	r5, [r4, #8]
 8003510:	bfa4      	itt	ge
 8003512:	f021 0104 	bicge.w	r1, r1, #4
 8003516:	6021      	strge	r1, [r4, #0]
 8003518:	b90e      	cbnz	r6, 800351e <_printf_i+0x116>
 800351a:	2d00      	cmp	r5, #0
 800351c:	d04b      	beq.n	80035b6 <_printf_i+0x1ae>
 800351e:	4615      	mov	r5, r2
 8003520:	fbb6 f1f3 	udiv	r1, r6, r3
 8003524:	fb03 6711 	mls	r7, r3, r1, r6
 8003528:	5dc7      	ldrb	r7, [r0, r7]
 800352a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800352e:	4637      	mov	r7, r6
 8003530:	42bb      	cmp	r3, r7
 8003532:	460e      	mov	r6, r1
 8003534:	d9f4      	bls.n	8003520 <_printf_i+0x118>
 8003536:	2b08      	cmp	r3, #8
 8003538:	d10b      	bne.n	8003552 <_printf_i+0x14a>
 800353a:	6823      	ldr	r3, [r4, #0]
 800353c:	07de      	lsls	r6, r3, #31
 800353e:	d508      	bpl.n	8003552 <_printf_i+0x14a>
 8003540:	6923      	ldr	r3, [r4, #16]
 8003542:	6861      	ldr	r1, [r4, #4]
 8003544:	4299      	cmp	r1, r3
 8003546:	bfde      	ittt	le
 8003548:	2330      	movle	r3, #48	; 0x30
 800354a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800354e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003552:	1b52      	subs	r2, r2, r5
 8003554:	6122      	str	r2, [r4, #16]
 8003556:	464b      	mov	r3, r9
 8003558:	4621      	mov	r1, r4
 800355a:	4640      	mov	r0, r8
 800355c:	f8cd a000 	str.w	sl, [sp]
 8003560:	aa03      	add	r2, sp, #12
 8003562:	f7ff fedf 	bl	8003324 <_printf_common>
 8003566:	3001      	adds	r0, #1
 8003568:	d14a      	bne.n	8003600 <_printf_i+0x1f8>
 800356a:	f04f 30ff 	mov.w	r0, #4294967295
 800356e:	b004      	add	sp, #16
 8003570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003574:	6823      	ldr	r3, [r4, #0]
 8003576:	f043 0320 	orr.w	r3, r3, #32
 800357a:	6023      	str	r3, [r4, #0]
 800357c:	2778      	movs	r7, #120	; 0x78
 800357e:	4832      	ldr	r0, [pc, #200]	; (8003648 <_printf_i+0x240>)
 8003580:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003584:	6823      	ldr	r3, [r4, #0]
 8003586:	6829      	ldr	r1, [r5, #0]
 8003588:	061f      	lsls	r7, r3, #24
 800358a:	f851 6b04 	ldr.w	r6, [r1], #4
 800358e:	d402      	bmi.n	8003596 <_printf_i+0x18e>
 8003590:	065f      	lsls	r7, r3, #25
 8003592:	bf48      	it	mi
 8003594:	b2b6      	uxthmi	r6, r6
 8003596:	07df      	lsls	r7, r3, #31
 8003598:	bf48      	it	mi
 800359a:	f043 0320 	orrmi.w	r3, r3, #32
 800359e:	6029      	str	r1, [r5, #0]
 80035a0:	bf48      	it	mi
 80035a2:	6023      	strmi	r3, [r4, #0]
 80035a4:	b91e      	cbnz	r6, 80035ae <_printf_i+0x1a6>
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	f023 0320 	bic.w	r3, r3, #32
 80035ac:	6023      	str	r3, [r4, #0]
 80035ae:	2310      	movs	r3, #16
 80035b0:	e7a6      	b.n	8003500 <_printf_i+0xf8>
 80035b2:	4824      	ldr	r0, [pc, #144]	; (8003644 <_printf_i+0x23c>)
 80035b4:	e7e4      	b.n	8003580 <_printf_i+0x178>
 80035b6:	4615      	mov	r5, r2
 80035b8:	e7bd      	b.n	8003536 <_printf_i+0x12e>
 80035ba:	682b      	ldr	r3, [r5, #0]
 80035bc:	6826      	ldr	r6, [r4, #0]
 80035be:	1d18      	adds	r0, r3, #4
 80035c0:	6961      	ldr	r1, [r4, #20]
 80035c2:	6028      	str	r0, [r5, #0]
 80035c4:	0635      	lsls	r5, r6, #24
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	d501      	bpl.n	80035ce <_printf_i+0x1c6>
 80035ca:	6019      	str	r1, [r3, #0]
 80035cc:	e002      	b.n	80035d4 <_printf_i+0x1cc>
 80035ce:	0670      	lsls	r0, r6, #25
 80035d0:	d5fb      	bpl.n	80035ca <_printf_i+0x1c2>
 80035d2:	8019      	strh	r1, [r3, #0]
 80035d4:	2300      	movs	r3, #0
 80035d6:	4615      	mov	r5, r2
 80035d8:	6123      	str	r3, [r4, #16]
 80035da:	e7bc      	b.n	8003556 <_printf_i+0x14e>
 80035dc:	682b      	ldr	r3, [r5, #0]
 80035de:	2100      	movs	r1, #0
 80035e0:	1d1a      	adds	r2, r3, #4
 80035e2:	602a      	str	r2, [r5, #0]
 80035e4:	681d      	ldr	r5, [r3, #0]
 80035e6:	6862      	ldr	r2, [r4, #4]
 80035e8:	4628      	mov	r0, r5
 80035ea:	f000 f83f 	bl	800366c <memchr>
 80035ee:	b108      	cbz	r0, 80035f4 <_printf_i+0x1ec>
 80035f0:	1b40      	subs	r0, r0, r5
 80035f2:	6060      	str	r0, [r4, #4]
 80035f4:	6863      	ldr	r3, [r4, #4]
 80035f6:	6123      	str	r3, [r4, #16]
 80035f8:	2300      	movs	r3, #0
 80035fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035fe:	e7aa      	b.n	8003556 <_printf_i+0x14e>
 8003600:	462a      	mov	r2, r5
 8003602:	4649      	mov	r1, r9
 8003604:	4640      	mov	r0, r8
 8003606:	6923      	ldr	r3, [r4, #16]
 8003608:	47d0      	blx	sl
 800360a:	3001      	adds	r0, #1
 800360c:	d0ad      	beq.n	800356a <_printf_i+0x162>
 800360e:	6823      	ldr	r3, [r4, #0]
 8003610:	079b      	lsls	r3, r3, #30
 8003612:	d413      	bmi.n	800363c <_printf_i+0x234>
 8003614:	68e0      	ldr	r0, [r4, #12]
 8003616:	9b03      	ldr	r3, [sp, #12]
 8003618:	4298      	cmp	r0, r3
 800361a:	bfb8      	it	lt
 800361c:	4618      	movlt	r0, r3
 800361e:	e7a6      	b.n	800356e <_printf_i+0x166>
 8003620:	2301      	movs	r3, #1
 8003622:	4632      	mov	r2, r6
 8003624:	4649      	mov	r1, r9
 8003626:	4640      	mov	r0, r8
 8003628:	47d0      	blx	sl
 800362a:	3001      	adds	r0, #1
 800362c:	d09d      	beq.n	800356a <_printf_i+0x162>
 800362e:	3501      	adds	r5, #1
 8003630:	68e3      	ldr	r3, [r4, #12]
 8003632:	9903      	ldr	r1, [sp, #12]
 8003634:	1a5b      	subs	r3, r3, r1
 8003636:	42ab      	cmp	r3, r5
 8003638:	dcf2      	bgt.n	8003620 <_printf_i+0x218>
 800363a:	e7eb      	b.n	8003614 <_printf_i+0x20c>
 800363c:	2500      	movs	r5, #0
 800363e:	f104 0619 	add.w	r6, r4, #25
 8003642:	e7f5      	b.n	8003630 <_printf_i+0x228>
 8003644:	08003ecf 	.word	0x08003ecf
 8003648:	08003ee0 	.word	0x08003ee0

0800364c <_sbrk_r>:
 800364c:	b538      	push	{r3, r4, r5, lr}
 800364e:	2300      	movs	r3, #0
 8003650:	4d05      	ldr	r5, [pc, #20]	; (8003668 <_sbrk_r+0x1c>)
 8003652:	4604      	mov	r4, r0
 8003654:	4608      	mov	r0, r1
 8003656:	602b      	str	r3, [r5, #0]
 8003658:	f7fd f8ce 	bl	80007f8 <_sbrk>
 800365c:	1c43      	adds	r3, r0, #1
 800365e:	d102      	bne.n	8003666 <_sbrk_r+0x1a>
 8003660:	682b      	ldr	r3, [r5, #0]
 8003662:	b103      	cbz	r3, 8003666 <_sbrk_r+0x1a>
 8003664:	6023      	str	r3, [r4, #0]
 8003666:	bd38      	pop	{r3, r4, r5, pc}
 8003668:	200006cc 	.word	0x200006cc

0800366c <memchr>:
 800366c:	4603      	mov	r3, r0
 800366e:	b510      	push	{r4, lr}
 8003670:	b2c9      	uxtb	r1, r1
 8003672:	4402      	add	r2, r0
 8003674:	4293      	cmp	r3, r2
 8003676:	4618      	mov	r0, r3
 8003678:	d101      	bne.n	800367e <memchr+0x12>
 800367a:	2000      	movs	r0, #0
 800367c:	e003      	b.n	8003686 <memchr+0x1a>
 800367e:	7804      	ldrb	r4, [r0, #0]
 8003680:	3301      	adds	r3, #1
 8003682:	428c      	cmp	r4, r1
 8003684:	d1f6      	bne.n	8003674 <memchr+0x8>
 8003686:	bd10      	pop	{r4, pc}

08003688 <_realloc_r>:
 8003688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800368c:	4680      	mov	r8, r0
 800368e:	4614      	mov	r4, r2
 8003690:	460e      	mov	r6, r1
 8003692:	b921      	cbnz	r1, 800369e <_realloc_r+0x16>
 8003694:	4611      	mov	r1, r2
 8003696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800369a:	f7ff bc5f 	b.w	8002f5c <_malloc_r>
 800369e:	b92a      	cbnz	r2, 80036ac <_realloc_r+0x24>
 80036a0:	f7ff fbf4 	bl	8002e8c <_free_r>
 80036a4:	4625      	mov	r5, r4
 80036a6:	4628      	mov	r0, r5
 80036a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036ac:	f000 f81b 	bl	80036e6 <_malloc_usable_size_r>
 80036b0:	4284      	cmp	r4, r0
 80036b2:	4607      	mov	r7, r0
 80036b4:	d802      	bhi.n	80036bc <_realloc_r+0x34>
 80036b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80036ba:	d812      	bhi.n	80036e2 <_realloc_r+0x5a>
 80036bc:	4621      	mov	r1, r4
 80036be:	4640      	mov	r0, r8
 80036c0:	f7ff fc4c 	bl	8002f5c <_malloc_r>
 80036c4:	4605      	mov	r5, r0
 80036c6:	2800      	cmp	r0, #0
 80036c8:	d0ed      	beq.n	80036a6 <_realloc_r+0x1e>
 80036ca:	42bc      	cmp	r4, r7
 80036cc:	4622      	mov	r2, r4
 80036ce:	4631      	mov	r1, r6
 80036d0:	bf28      	it	cs
 80036d2:	463a      	movcs	r2, r7
 80036d4:	f7ff fbcc 	bl	8002e70 <memcpy>
 80036d8:	4631      	mov	r1, r6
 80036da:	4640      	mov	r0, r8
 80036dc:	f7ff fbd6 	bl	8002e8c <_free_r>
 80036e0:	e7e1      	b.n	80036a6 <_realloc_r+0x1e>
 80036e2:	4635      	mov	r5, r6
 80036e4:	e7df      	b.n	80036a6 <_realloc_r+0x1e>

080036e6 <_malloc_usable_size_r>:
 80036e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036ea:	1f18      	subs	r0, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	bfbc      	itt	lt
 80036f0:	580b      	ldrlt	r3, [r1, r0]
 80036f2:	18c0      	addlt	r0, r0, r3
 80036f4:	4770      	bx	lr
	...

080036f8 <_init>:
 80036f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036fa:	bf00      	nop
 80036fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036fe:	bc08      	pop	{r3}
 8003700:	469e      	mov	lr, r3
 8003702:	4770      	bx	lr

08003704 <_fini>:
 8003704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003706:	bf00      	nop
 8003708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800370a:	bc08      	pop	{r3}
 800370c:	469e      	mov	lr, r3
 800370e:	4770      	bx	lr
